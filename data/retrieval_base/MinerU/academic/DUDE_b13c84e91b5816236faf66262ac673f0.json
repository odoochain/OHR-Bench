[
    {
        "page_idx": 0,
        "text": "# \nShaik.Mohammad Rafi 1, Shaheda Akthar 2 1Dept. of Computer Science, Sri Mittapalli Institute of Technology for women, Guntur, A.P, India E-mail:mdrafi. $.527@$ gmail.com 2Dept. of Computer Science, Sri Mittapalli College of Engineering, Guntur, A.P, India E-mail:shaheda.akthar $@$ yahoo.com \nAbstract- Software reliability is one of the important factors of software quality. Before software delivered in to market it is thoroughly checked and errors are removed. Every software industry wants to develop software that should be error free. Software reliability growth models are helping the software industries to develop software which is error free and reliable. In this paper an analysis is done based on incorporating the logistic-exponential testing-effort in to NHPP Software reliability growth model and also observed its release policy. Experiments are performed on the real datasets. Parameters are calculated and observed that our model is best fitted for the datasets. \nKeywords- Software Reliability, Software Testing, Testing Effort, Non-homogeneous Poisson Process (NHPP), Software Cost. \n# \nNHPP : Non Homogeneous Poisson Process SRGM : Software Reliability Growth Model MVF : Mean Value Function MLE : Maximum Likelihood Estimation TEF : Testing Effort Function LOC : Lines of Code MSE : Mean Square fitting Error \n# \nm (t) : Expected mean number of faults detected in time (0,t]   \në (t) : Failure intensity for $\\mathrm{m}(\\mathrm{t})$   \nn (t) : Fault content function   \n$\\mathrm{m_{d}}$ (t) : Cumulative number of faults detected upto t   \n$\\mathbf{m}_{\\mathrm{r}}$ (t) : Cumulative number of faults isolated up to t.   \nW (t) : Cumulative testing effort consumption at timet.   \n$\\mathbf{W}^{*}(\\mathfrak{t})$ : W (t)-W (0)   \nA : Expected number of initial faults   \nr (t) : Failure detection rate function   \nr : Constant fault detection rate function.   \n${\\bf r}_{1}$ : Constant fault detection rate in the Delayed Sshaped    model with logistic-Exponential TEF   \n$\\mathbf{r}_{2}$ : Constant fault isolated rate in the Delayed Sshaped model with logistic-Exponential TEF \n# \nSoftware becomes crucial in daily life. Computers, commutation devices and electronics equipments every place we find software. The goal of every software industries is develop software which is error and fault free. Every industry is adopting a new testing technique to capture the errors during the testing phase. But even though some of the faults were undetected. These faults create the problems in future. Reliability is defined as the working condition of the software over certain time period of time in a given environmental conditions. Large numbers of papers are presented in this context. Testing effort is defined as effort needed to detect and correct the errors during the testing. Testing-effort can be calculated as person/ month, CPU hours and number of test cases and so on. Generally the software testing consumes a testing-effort during the testing phase [20 21].SRGM proposed by several papers incorporated traditional effort curves like Exponential, Rayleigh, and Weibull. The TEF which gives the effort required in testing and CPU time the software for better error tracking. Many papers are published based on TEF in NHPP models [4, 5, 8, 11, 120, 12, 20, 21]. All of them describe the tracking phenomenon with test expenditure. \nThis paper we used logistic-exponential testing-effort curve and incorporated in the SRGM. The result shows that the SRGM with logistic-exponential \n# \nSeveral software testing-effort functions are defined in literature. w(t) is defined as the current testing effort and W(t) describes the cumulative testing effort. The following equation shows the relation between the w(t) and W(t) \n$$\n\\mathcal{W}(t)=\\int_{0}^{t}w(t)d t\n$$\nThe following are some of them \nA.   Exponential Testing effort function \nThe cumulative testing effort consumed in the time (0,t] is [20] \nB.  Rayleigh Testing effort curve: \n$$\nW(t)=N\\times\\left(1-\\exp\\left[-b t\\right]\\right)\n$$"
    },
    {
        "page_idx": 1,
        "text": "The cumulative testing effort consumed in the time (0,t] is [12,20] \n$$\n\\begin{array}{r}{W(t)=N\\times(1-\\exp{[-\\left(\\frac{\\tilde{v}}{\\tilde{\\tau}}\\right)t^{z}]}}\\end{array}\n$$\nThe Rayleigh curve increases to the peak and descends gradually with decelerating rate. \n# \nIt has a great flexibility in accommodating all the forms of the hazard rate function, can be used in a variety of problems for modeling software failure data. \nThe logistic-exponential cumulative TEF over time period (0,t] can be expressed as [27] \n$$\n\\begin{array}{r}{W(t)=\\alpha\\times\\frac{(e^{\\lambda\\times t}-1)^{\\lambda}}{\\left(1+\\left(e^{\\lambda\\times t}-1\\right)^{\\lambda}\\right)},\\quad1>0}\\end{array}\n$$\nAnd its current testing effort is \n$$\nw(t)=\\frac{\\alpha\\times k\\times\\lambda\\times\\mathrm{e}^{\\lambda\\times t}\\times\\left(\\mathrm{e}^{\\lambda\\times t}-1\\right)^{k-1}}{\\left(1+\\left(\\mathrm{e}^{\\lambda\\times t}-1\\right)^{k}\\right)^{2}}150\n$$\n$\\alpha$ is the total expenditure , $_\\mathrm{k}$ positive shape parameter and $\\lambda$ is a positive scale parameter \nIII. SOFTWARE RELIABILITY GROWTH MODELS \n# \nThe following assumptions are made for software reliability growth modeling [1, 8, 11, 20, 21, 22] \n(i) The fault removal process follows  the NonHomogeneous Poisson process (NHPP) The software system is subjected to failure at random time caused by faults remaining in the system. (iii) The mean time number of faults detected in the time interval $(\\mathfrak{t},\\mathfrak{t}+\\ddot{\\mathrm{A}}\\mathfrak{t})$ by the current test effort is proportional for the mean number of remaining faults in the system. (iv) The proportionality is constant over the time. (v)  Consumption curve of testing effort is modeled by a logistic-exponential TEF. (vi)  Each time a failure occurs, the fault that caused it is immediately removed and no new faults are introduced. (vii) We can describe the mathematical expression of a testing-effort based on following $\\frac{\\bar{d}m(t)}{d t}\\times\\frac{1}{w(t)}=r\\times\\stackrel{\\_}{(a-m(t))}$ (6) $m(t)=a\\times{\\bigl(}1-\\mathbf{e}^{-r\\times{\\bigl(}W(t)-W(0){\\bigr)}}{\\bigr)}$ (7) Substituting W(t) into Eq.(7), we get $m(t)=a\\times\\left(1-\\exp\\left(-r\\times0.\\times\\frac{\\left(\\mathfrak{e}^{\\lambda\\times t}-1\\right)^{k}}{\\left(1+\\left(\\mathfrak{e}^{\\lambda\\times t}-1\\right)^{k}\\right)}\\right)\\right)$ (8) This is an NHPP model with mean value function with the Logistic-exponential testing-effort expenditure. \nNow failure intensity is given by \n$$\n\\lambda(t)=\\frac{d m(t)}{d t}=a\\times r\\times w(t)\\times\\mathrm{\\mathrm{e}}^{-r\\times W(t)}\n$$\n$$\n\\hat{\\lambda}(t)=\\frac{a\\mathfrak{e}^{-\\displaystyle{\\frac{r\\mathfrak{a}\\left(\\mathfrak{e}^{\\lambda t}-1\\right)^{k}-\\hat{\\lambda}t-\\hat{\\lambda}t\\left(\\mathfrak{e}^{\\lambda t}-1\\right)^{k}}{1+\\left(\\mathfrak{e}^{\\lambda t}-1\\right)^{k}}}}}{\\left(1+\\left(\\mathfrak{e}^{\\lambda t}-1\\right)^{k}\\right)^{2}}r\\mathfrak{a}k\\hat{\\lambda}\\left(\\mathfrak{e}^{\\lambda t}-1\\right)^{k-1}}\n$$\nThe expected number of errors detected eventually is \n# \nThe delayed $\\mathbf{\\sigma}^{\\leftarrow}\\mathbf{S}^{\\rightarrow}$ shaped model originally proposed by Yamada [24]  and it is different from NHPP by considering that software testing is not only for error detection but error isolation. And the cumulative errors detected follow the Sshaped curve. This behavior is indeed initial phase testers are familiar with type of errors and residual faults become more difficult to uncover [1, 6, 15, 16]. From the above steps described section 3.1, we will get a relationship between $\\mathrm{m(t)}$ and $\\mathbf{w}(\\mathfrak{t})$ . For extended Yamada S-shaped software reliability model.The extended S-shaped model [24] is modeled by \nand WAAA \n$$\n\\begin{array}{l}{{\\displaystyle\\frac{d m_{d}(t)}{d t}\\times\\frac{1}{w(t)}=r_{1}\\times\\left[a^{-m}{}_{d}(t)\\right]}}\\ {{\\displaystyle\\frac{d m_{r}(t)}{d t}\\times\\frac{1}{w(t)}=r_{2}\\times\\left[a^{-m}{}_{r}(t)\\right]}}\\end{array}\n$$\nWe assume $\\mathbf{r}_{2}\\neq\\mathbf{r}_{1}$ by solving 2 and 3 boundry conditions \n$$\n\\begin{array}{r l r}{\\mathrm{m}_{\\mathrm{d}}(\\mathrm{t})=0\\mathrm{,~we~have~}}&{}&\\ {m_{\\_}(t)=a\\times\\left(\\begin{array}{l}{\\_{1}-e^{\\big[\\begin{array}{l}{-r_{_1}\\times W^{*}(t)\\big]}\\end{array}\\right)}}&{\\mathrm{wind}}\\ {\\mathrm{and}}&{}&{\\mathrm{and}}\\end{array}\n$$\nAt this stage we assume $\\mathrm{r}_{2}\\approx\\mathrm{r}_{1}{\\approx}1$ ,then using ‘L' Hospitals rule the Delayed S-shaped model with TEF is given by \n$$\nm(t)\\cong m_{r}(t)=a\\times\\{1-\\left(1+r\\times\\lVert\\cdot(t)\\right)\\times\\mathfrak{e}^{\\left[-r\\times\\lVert\\cdot(t)\\right]}\\right\\}\n$$\nThe failure intensity function for Delayed S-shaped model with TEF is given by \n$$\n\\lambda(t)=a\\times r^{2}\\times\\stackrel{{\\_}}{w(t)}\\times\\stackrel{{\\_}}{W^{*}}(t)\\times\\mathrm{e}^{[\\stackrel{\\_}{\\sim}r\\times\\stackrel{\\_}{W^{*}}(t)]}\n$$\n# \n# \nHere we used MSE [5, 11, 17, 23 ]which gives real measure of the difference between actual and predicted values. The MSE defined as \n$$\nM S E=\\sum_{i=1}^{k}\\frac{\\left[m\\left(\\boldsymbol{t}_{i}\\right)-m_{i}\\right]^{2}}{k}\n$$\nA smaller MSE indicate a smaller fitting error and better performance."
    },
    {
        "page_idx": 2,
        "text": "# \nWhich measures the percentage of total variation about mean accounted for the fitted model and tells us how well a curve fits the data. It is frequently employed to compare model and access which model provies the best fit to the data. The best model is that which proves higher $\\mathbf{R}^{2}$ . that is closer to 1. \n# \nThe capability of the model to predict failure behavior from present $\\&$ past failure behavior is called predictive validity. This approach, which was proposed by [26], can be represented by computing RE for a data set \n$$\nR E=\\frac{(m(t_{q})-q)}{q}\n$$\nIn order to check the performance of the logistic exponential software reliability growth model and make a comparison criteria for our evaluations [14] \n# \nSSE can be calculated as :[17] \n$$\nS S E=\\sum_{i=1}^{n}\\left[\\nu_{i}-m(t_{i})\\right]^{2}\n$$\nWhere $\\mathfrak{J}_{\\dot{\\mathfrak{A}}}$ is total number of failures observed at a time $\\mathfrak{L}$ according to the actual data and $\\mathrm{m}(\\mathrm{t}_{\\mathrm{j}})$ is the estimated cumulative number of failures at a time $\\mathfrak{L}$ for i=1.,2.... \n$$\n\\begin{array}{c}{{B i a s=\\displaystyle{\\sum_{i=1}^{n}\\frac{P E_{i}}{n}}}}\\ {{{}}}\\ {{V a r i a t i o n=\\displaystyle{\\sqrt{\\displaystyle{\\sum_{i=1}^{n}\\frac{\\left(P E_{i}-B i a s\\right)^{2}}{n-1}}}}}}\\ {{M R E=\\displaystyle{\\frac{\\left|M_{e s t i m a t e d}-M_{a c t u a l}\\right|}{M_{a c t u a l}}}}}\\end{array}\n$$\n# \n# \nThe first set of actual data is from the study by Ohba 1984 [15].the system is PL/1 data base application software ,consisting of approximately 1,317,000lines of code .During nineteen weeks of experiments, 47.65 CPU hours were consumed and about 328 software errors are removed. \nFitting the model to the actual data means by estimating the model parameter from actual failure data. Here we used the LSE (non-linear least square estimation) and MLE to estimate the parameters. Calculations are given in appendix A \nFig 1. Observed/estimated logistic-exponential and Rayleigh TEF for DS1. \nAll parameters of other distribution are estimated through LSE. The unknown parameters of Logistic-exponential TEF are $\\mathrm{\\acute{a}}{=}72$ (CPU hours), $\\ddot{\\mathrm{e}}{=}0.04847$ , and $\\mathrm{k}{=}1.387$ . Correspondingly the estimated parameters of Rayleigh TEF $\\scriptstyle\\mathrm{N}=49.32$ and $\\ b{=}0.00684,$ /week. Fig.1 plots the comparison between observed failure data and the data estimated by Logistic-exponential TEF and Rayleigh TEF. The PE, Bias, Variation, MRE and RMS-PE for Logistic-exponential and Rayleigh are listed in Table I. From the TABLE I we can see that Logistic-exponential has lower PE, Bias, Variation, MRE and RMS-PE than Rayleigh TEF. We can say that our proposed model fits better than the other one. In the TABLE II we have listed estimated values of SRGM with different testing-efforts. We have also given the values of SSE, ${\\mathbf{R}}^{2}$ and MSE. We observed that our proposed model has smallest MSE and SSE value when compared with other models. The $95\\%$ confidence limits for the all models are given in the Table III. \nTABLE-1 COMPARISION RESULT FOR DIFFERENT TEF APPLIED TO DS1 \n\\begin{tabular}{lllll}\nTEF & BIAS & VARIATION & MRE & RMS-PE \\\\\nPRESENT & 0.2243 & 1.297 & 0.033 & 1.27 \\\\\nRayleigh & 0.830337 & 2.169314 & 0.052676 & 2.004112 \\\\\n\\end{tabular}\n\n\nB.   DS2: \nThe dataset used here presented by wood [2] from a subset of products for four separate software releases at Tandem Computer Company. Wood Reported that the specific products & releases are not identified and the test data has been suitably transformed in order to avoid Confidentiality issue. Here we use release 1 for illustrations. Over the course of 20 weeks, 10000 CPU that SRGM with logistic-exponential TEF have less MSE than other models."
    },
    {
        "page_idx": 3,
        "text": "TABLE-II ESTIMATED PARAMETER VALUES AND MODEL COMPARISION FOR DS1 \n\\begin{tabular}{llllll}\nModels & a. & I & SSE & R2 & MSE \\\\\nSRGM with Logistic-exponential TEF & 578.8 & 0.01903 & 2183 & 0.9889 & 128.36 \\\\\nDelayed S shapedmodel with Logistic- exp onential TEF & 353.7 & 0.08863 & 7546 & 0.9615 & 443.94 \\\\\nSRGM with Rayleigh TEF & 459.1 & 0.02734 & 5100 & 0.974 & 299.98 \\\\\nDelayedS shapedmodelwith Rayleigh TEF &  & 0.1004 & 15170 & 0.9226 & 892.2 \\\\\nG-O model & 760.5 & 0.03227 & 2656 & 0.9865 & 156.2 \\\\\nYamada Delayed S shaped model & 374.1 & 0.1977 & 3205 & 0.9837 & 188.51 \\\\\n\\end{tabular}\n\n\nTABLE II 95% CONFIDENCE LIMIT FOR DIFFERENT SELECTED MODELS(DS1) \n\\begin{tabular}{lllll}\n\\multirow{2}{*}{Models} & \\multicolumn{2}{l}{2} & \\multicolumn{2}{l}{} \\\\\n &  & Upper & BMOT & Upper \\\\\nSRGM with Logistic-exponential TEF & 441.5 & 716 & 0.01268 & 0.02538 \\\\\nSRGM with Rayleigh TEF & 348.6 & 569.6 & 0.01651 & 0.03817 \\\\\nYamada Delayed S shaped Model with Legsitic-exponential TEF & 314.5 & 392.8 & 0.07288 & 0.1044 \\\\\nYamada Delayed S shaped Model with Rayleigh TEF & 288.7 & 377.7 & 0.07507 & 0.1258 \\\\\nG-0 model & 465.4 & 1056 & 0.01646 & 0.04808 \\\\\nYamada Delayed S shaped model & 343.7 & 404.4 & 0.1748 & 0.2205 \\\\\n\\end{tabular}"
    },
    {
        "page_idx": 4,
        "text": "Fig 5. Observed/estimated Logistic-exponential and Rayleigh TEFfor DS2. \n# \n# \nGenerally software release problem associated with the reliability of a software system. Here in this first we discuss the optimal time based on reliability criterion. If we know software has reached its maximum reliability for a particular time. By that we can decide right time for the software to be delivered out. Goel and Okumoto [1] first dealed with the software release problem considering the software costbenefit. The conditional reliability function after the last failure occurs at time t is obtained by \n$$\n\\begin{array}{r}{\\underset{=\\mathrm{exp}\\big(-m\\big(\\Delta{t}\\big)}{\\mathrm{R}(\\mathrm{t}+\\Delta{t}/\\mathrm{t})=\\mathrm{exp}(-[\\mathrm{m}(\\mathrm{t}+\\Delta{t}/\\mathrm{t})-\\mathrm{m}(\\mathrm{t})])}}\\ {=\\mathrm{exp}\\big(-m\\big(\\Delta{t}\\big)\\times\\mathrm{exp}\\big(-r\\times W*(\\mathrm{\\Delta}{t})\\big)\\big)}\\end{array}\n$$\nTaking the logarithm on both sides of the above equation and rearrange the above equation we obtain $\\ln R=-m\\big(\\Delta t\\big)\\times\\exp\\big(-r\\times W{*(t)}\\big)$ (25) \n# \n$$\nW*\\left(t\\right)=\\frac{1}{r}\\left[\\ln m\\bigl(\\Delta t\\bigr)-\\ln\\ln\\left(\\frac{1}{R}\\right)\\right]\n$$\nBy solving the $\\mathtt{e q}26$ we can reach the desired reliability level. For DS1 $\\Delta{\\mathrm{t}}{=}0.1~\\mathrm{R}{=}0.91$ at $\\mathrm{T}{=}42.1$ weeks \n# \nThis section deals with the release policy based on the cost-reliability criterion. Using the total software cost evaluated by cost criterion, the cost of testing-effort expenditures during software testing/development phase and the cost of fixing errors before and after release are: [9, 13, 25] \n$$\n\\begin{array}{r}{C(T)=C_{1}m(T)+C_{2}\\left[m\\big(T_{L C}\\big)-m(T)\\right]+C_{3}\\left(\\displaystyle\\int_{0}^{T}w(x)\\mathrm{d}x\\right)}\\end{array}\n$$\nWhere $\\mathrm{C}_{\\scriptscriptstyle1}$ the cost of correcting an error during testing, $\\mathrm{C}_{_{2}}$ is the cost of correcting an error during the operation, $\\mathrm{C}_{_{2}}$ $>\\mathrm{{C}_{1}}$ , $\\mathrm{C}_{3}$ is the cost of testing per unit testing effort expenditure and $\\mathrm{T}_{\\mathrm{LC}}$ is the software life-cycle length. \nFrom reliability criteria, we can obtain the required testing time needed to reach the reliability objective ${\\sf R}_{\\mathrm{o}}$ . Our aim is to determine the optimal software release time that minimizes the total software cost to achieve the desired software reliability. Therefore, the optimal software release policy for the proposed software reliability can be formulated as Minimize C(T) subjected to $\\mathbf{R}(\\mathrm{t+\\ddot{A}t/t})\\mathrm{e}^{\\mathfrak{v}}\\mathrm{R}_{_0}$ for $\\mathbf{C}_{2}>\\mathbf{C}_{1,}\\mathbf{C}_{3}$ $>0,\\ddot{\\mathrm{At}}{>}0,0<\\mathtt{R}_{0}<1.$ . \n\nDifferentiate the equation (30) with respect to $\\mathrm{T}$ and setting it to zero, we obtain \n$$\n\\begin{array}{l}{{\\frac{\\dot{a}}{d T}c[|T=c_{1}\\left(\\frac{\\dot{a}}{d T}v[T]\\right)+c_{1}\\left[\\frac{\\dot{b}}{\\partial T}v[T_{L}]-\\left(\\frac{\\dot{a}}{d T}v[T]\\right)\\right]+c_{3}v[T]}}\\ {{\\frac{\\dot{0}}{\\partial T}m\\left(T_{L C}\\right)=0}}\\ {{\\frac{\\dot{a}}{d T}c[|T=c_{1}\\left(\\frac{\\dot{a}}{d T}n[T]\\right)+c_{2}\\left[-\\left(\\frac{\\dot{a}}{d T}m[T]\\right)\\right]+C_{3}\\Psi[T]=0}}\\ {{\\frac{\\dot{a}}{\\mathrm{d}T}m\\left(T\\right)=\\dot{b}(T)}}\\ {{\\frac{\\dot{\\lambda}(T)}{w(T)}=\\frac{c^{3}}{c^{2}-c T}}}\\ {{a r^{-\\Psi{\\Psi{\\Psi{\\Psi{\\Psi{\\Psi{\\Psi{\\Psi}}}}}}}}=r(a-m(T))}}\\end{array}\n$$\nWhen ${\\mathrm{T}}{=}0$ then $\\mathtt{m}(0){=}0$ and $\\frac{\\lambda(T)}{w(T)}=a r$ \nWhen $T{\\cdot}>\\infty$ , then $m(\\infty)=a$ monotonically decreasing in T. \n\nTo analyze the minimum value of $\\stackrel{\\warrow}{\\subset}(\\mathbb{T})$ Eq. (27) is used to define the two cases of $\\frac{\\lambda(T)}{w(T)}$ at T=0. 1) if $\\frac{\\lambda(0)}{w(0)}=a\\times r\\leq\\frac{C3}{C2-C l}$ , then $\\frac{\\lambda(T)}{w(T)}\\leq\\frac{C3}{C2-C I}$ for $0{<}\\mathrm{T}{<}\\mathrm{T}_{\\mathrm{LC}}$ it can be obtained at $\\mathrm{d}\\overline{{\\mathbf{C}}}(\\mathrm{T})/\\mathrm{dT}{\\bf>}0\\mathrm{for}0{\\mathrm{<T}}{\\mathrm{<T}}_{\\mathrm{LC}}$ and the minimal value can found at C(T) can be found at $\\mathrm{T}{=}0$ \n$$\n{\\bf i f}\\frac{\\lambda(0)}{w(0)}=a\\times r>\\frac{C3}{C2-C l}>\\frac{\\lambda(T)}{w(T)}=a\\times r\\times\\mathrm{e}^{-r\\times0}.\n$$\nthere can be found a finite and unique real number \n$$\nT_{0}=\\frac{\\mathrm{ln}\\Bigg(\\left(-\\frac{\\mathrm{ln}\\Big(-\\frac{C3}{\\textit{a r}(-C2+C/)}\\Big)}{\\textit{r e c t i n}\\Big(-\\frac{C3}{\\textit{a r}(-C2+C/)}\\Big)}\\right)^{\\frac{1}{k}}+1\\Bigg)}{\\lambda}\n$$\nbecause $\\mathrm{d}\\mathrm{C}(\\mathrm{T})/\\mathrm{d}\\mathrm{T}{<}0$ for $0{<}\\ensuremath{\\mathrm{T}}{<}\\ensuremath{\\mathrm{T}}_{0}$ and $\\mathrm{d}\\mathrm{C}(\\mathrm{T})/\\mathrm{d}\\mathrm{T}{>}0$ for $\\mathrm{T}>\\mathrm{T}_{0}$ , the minimum of $\\mathrm{{C(T)}}$ is at ${\\mathrm{T}}{=}{\\mathrm{T}}_{0}$ for $\\mathrm{T}_{0}\\leq\\mathrm{T}$ \nwe can easily get the required testing time needed to reach the reliability objective ${\\sf R}_{\\mathrm{o}}$ . here our goal is to minimize the total software cost under desired software reliability and then the optimal software release time is obtained. That is can minimize the C(T) subjected to $\\mathtt{R}(\\mathtt{t}+\\ddot{\\mathrm{A}}\\mathtt{t}/\\mathtt{t})\\mathrm{e}^{\\mathrm{}?}\\mathrm{R}_{0}$ where $0<\\mathrm{~R~}_{_{0}}$ $^{<1}$ [9,25] \n$\\mathrm{T}^{*}=$ optimal software release time or total testing time $\\mathsf{=m a x\\{T_{0,}T_{1}\\}.}$ Where $\\mathrm{T}_{0}=$ finite and unique solution T satisfying Eq.(31) $\\mathrm{T}_{1}=$ finite and unique T satisfying $\\mathrm{{R}(t+\\ddot{A}t/}$ ${\\sf t}){=}{\\sf R}_{\\mathrm{0}}$"
    },
    {
        "page_idx": 5,
        "text": "By combining the above analysis and combining the cost and reliability requirements we have the following theorem. \nTheorem 1: Assume $\\mathbf{C}2<\\mathbf{C}1<0,\\mathbf{C}3<0,\\ddot{\\mathbf{A}}\\mathbf{t}>0.$ , and $0{<}\\mathrm{R}_{_{0}}$ $^{<1}$ .  Let $\\mathrm{T}^{*}\\mathrm{be}$ the optimal software release time \n$$\n_\\mathrm{if}\\frac{\\lambda(0)}{w(0)}>\\frac{C3}{C2-C l}\n$$\n$$\n\\begin{array}{c}{\\displaystyle\\frac{\\lambda(T)}{w(T)}=a\\times r\\times\\mathrm{e}^{-r x}a\\leq\\frac{C3}{C2-C I}\\frac{C3}{\\mathrm{~inst~}}}\\ {\\displaystyle r^{*}=\\left\\{\\operatorname*{max}(r_{0},r_{1})\\mathrm{tor}R\\Big(\\frac{\\lambda t}{0}\\Big)<R_{0}<1\\right.}\\ {\\displaystyle r_{0}\\mathrm{tor}\\circ<R_{0}<\\Big(\\frac{\\lambda t}{0}\\Big)}\\ {\\displaystyle M_{w(0)}^{\\frac{\\lambda(\\theta)}{2}}\\geq\\frac{C3}{C2-C I}\\mathrm{tme}^{-r x}\\sum_{i}\\mathrm{ts}e^{r x}\\Big[\\frac{(\\frac{\\lambda t}{0})<e_{i}^{E_{i}}<1}{0.6e^{-\\theta}R_{0}^{\\frac{\\lambda i}{\\Theta}}}\\Big]}\\ {\\displaystyle\\left.\\lVert u_{\\mathrm{ret}}^{\\frac{\\lambda(\\theta)}{2}}\\right\\rVert_{(0)}^{\\infty}<\\frac{C3}{C2-C I}\\mathrm{tme}^{r x}\\left[\\begin{array}{l l}{\\tau_{1}}&{\\mathrm{for}\\left(\\frac{\\lambda t}{0}\\right)<e_{i}^{E_{i}}<1}\\ {0.6e^{-\\theta}R_{0}^{\\frac{\\lambda i}{\\Theta}}}&{0.}\\end{array}\\right.}\\end{array}\n$$\nFrom the dataset one estimated values of SRGM with Logistic-exponential TEF $\\mathrm{\\acute{a}}{=}72$ (CPU hours), $\\ddot{\\mathrm{e}}{=}0.04847/$ week, $\\mathrm{k}{=}1.387$ , $\\scriptstyle{\\mathrm{a}}=578.8$ and $\\mathrm{r}{=}0.01903$ when $\\ddot{\\operatorname{At}}{=}0.1~\\operatorname{R}_{_{0}}$ $=0.85$ and we let $C_{1}{=}2$ , $_{\\textrm C2=50}$ , $\\mathrm{C}_{3}=150$ and $\\mathrm{T_{Lc}=}100$ the estimated time $\\mathrm{T}_{1}=37.1$ weeks and release time from eq 30 $\\mathrm{T}_{0}{=}39.5$ weeks. Now optimal Release Time max (37.1, 39.5) is ${\\mathrm{T}}^{*}{=}39.5$ weeks. Fig 10 shows the change in software cost during the time span. Now total cost of the software at optimal time 8354. \nFrom the dataset two estimated values of SRGM with Logistic-exponential TEF $\\scriptstyle{\\dot{\\mathrm{a}}}=12600$ (CPU hours), $\\ddot{\\mathrm{e}}{=}0.06352$ /week, $\\mathrm{k}{=}1.391$ , $\\mathsf{a}\\mathsf{=}135.6$ and $\\mathrm{r}{=}0.0001432$ when $\\ddot{\\mathrm{At}}{=}0.1\\mathrm{R}_{_{0}}$ $=0.85$ and we let ${\\mathrm{C}_{1}}\\mathrm{{=}}1$ , ${\\bf C}2=200$ , ${\\mathrm{C}}_{3}=2$ and $\\mathrm{T_{Lc}=}100$ the estimated time $\\mathrm{T_{1}}\\mathrm{=}18.1$ weeks and release time from Eq 31 $\\mathrm{T_{0}}\\mathrm{=}8.05$ weeks. Now optimal Release Time max (8.05, 18.1) is $\\mathrm{T}^{*}{=}18.1$ weeks. Fig 11 shows the change in software cost during the time span. Now total cost of the software at optimal time 20,100. \nFig 9 Reliability and Total Cost curve (DS1) \n# \nIn this paper, we proposed a SRGM incorporating the Logistic-exponential testing effort function that is completely different from the logistic type Curve. We Observed that most of software failure is time dependent. By incorporating testing-effort into SRGM we can make realistic assumptions about the software failure. The experimental results indicate that our proposed model fits fairly well. \n# \n[1] A.L. Goel and K. Okumoto, A time dependent error detection rate model for a large scale software system, Proc. 3rd USAJapan Computer Conference, pp. 3540, San Francisco, CA (1978).   \n[2] A.Wood, Predicting software reliability, IEEE computers 11 (1996) 69–77.   \n[3] Bokhari, M.U. and Ahmad, N. (2005), “Software reliability growth modeling for exponentiated Weibull functions with actual software failures data”, in Proceedings of 3rd International Conference on Innovative Applications of Information Technology for Developing World (AACC’2005), Nepal.   \n[4] Bokhari, M.U. and Ahmad, N. (2006), “Analysis of a software reliability growth models: the case of log-logistic test-effort function”, in Proceedings of the 17th International Conference on Modelling and Simulation (MS’2006), Montreal, Canada, pp. 540-5.   \n[5]  C.-Y. Huang, S.-Y. Kuo, J.Y. Chen, Analysis of a software reliability growth model with logistic testing effort function proceeding of Eighth International Symposium on Software Reliability Engineering, 1997, pp. 378–388.   \n[6] Goel, A.L., “Software reliability models: Assumptions, limitations, and applicability”, IEEE Transactions on Software Engineering SE-11 (1985) 1411-1423.   \n[7]  Huang, C.Y. and Kuo, S.Y. (2002), “Analysis of incorporating logistic testing-effort function into software reliability modeling”, IEEE Transactions on Reliability, Vol. 51 No. 3, pp. 261-70.   \n[8]  Huang, C.Y., Kuo, S.Y. and Chen, I.Y. (1997), “Analysis of software reliability growth model with logistic testing-effort function”, in Proceeding of 8th International Symposium on Software Reliability Engineering  (ISSRE’1997), Albuquerque, New Mexico, pp. 378-88.   \n[9] Huang, C.Y., Kuo, S.Y. and Lyu, M.R. (1999), “Optimal software release policy based on cost, reliability and testing efficiency”, in Proceedings of the 23rd IEEE Annual International   \n[10] Huang, C.Y., Kuo, S.Y. and Lyu, M.R. (2000), “Effort-index based software reliability growth models and performance assessment”, in Proceedings of the 24th IEEE Annual International Computer Software and Applications Conference (COMPSAC’2000), pp. 454-9.   \n[11]Huang, Lyu and Kuo “An Assesment of testing effort dependent software reliability Growth model”. IEEE transactions on Reliability Vol 56, No: 2, June 2007   \n[12]Huang and S. Y. Kuo, “Analysis and assessment of incorporating logistic testing effort function into software reliability modeling,” IEEE Trans. Reliability, vol. 51, no. 3, pp. 261–270, Sept. 2002.   \n[13] K. Pillai and V. S. Sukumaran Nair, “A model for software development effort and cost estimation,” IEEE Trans. Software Engineering, vol. 23, no. 8, August 1997.   \n[14] K. Srinivasan and D. Fisher, “Machine learning approaches to estimating software development effort,” IEEE Trans. Software Engineering, vol. 21, no. 2, pp. 126–136, 1995.   \n[15] M. Ohba, Software reliability analysis models, IBM J. Res. Dev. 28 (1984) 428–443.   \n[16] M.R. Lyu, Handbook of Software Reliability Engineering, Mcgraw Hill, 1996.   \n[17] Pham, H. (2000), Software Reliability, Springer-Verlag, New York, NY.   \n[18]  Quadri, S.M.K., Ahmad, N., Peer, M.A. and Kumar, M. (2006), “Nonhomogeneous Poisson process software reliability growth model with generalized exponential testing effort function”, RAU Journal of Research, Vol. 16 Nos 1-2, pp. 159-63.   \n[19] Rameshwar D. Gupta and Debasis Kundu “generalized exponential distribution: different method of estimations” j. statist. comput. simul., 2000, vol. 00, pp. 1 – 22 14 november 2000.   \n[20] S. Yamada, H. Ohtera and R. Narihisa, “Software Reliability Growth Models with Testing-Effort,” IEEE Trans. Reliability, Vol. R-35, pp. 19-23 (1986).   \n[21]   S. Yamada, H. Ohtera, Software reliability growth model for testing effort control, Eur. J. Oper. Res. 46 (1990) 343–349.   \n[22] S.Yamada, S.Osaki, “Software reliability growth modeling: models and applications”, IEEE Trans. Software Engineering, vol.l I, no.12, p.1431-1437, December 1985.   \n[23] Xie, M. (1991), Software Reliability Modeling, World Scientific Publication, Singapore.   \n[24] Yamada, S., Ohba, M., Osaki, S., 1983. S-shaped reliability growth modeling for software error detection. IEEE Trans. Reliab. 12, 475–484.   \n[25] Yamada, S. and Osaki, S. (1985b), “Cost-reliability optimal release policies for software systems”, IEEE Transactions on Reliability, Vol. R-34 No. 5, pp. 422-4.   \n[26]J.D. Musa, A. Iannino, and K. Okumoto, Software Reliability:Measurement, Prediction, Application, McGrawHill NewYork, 1987.   \n[27]  Y. Lan, and L. Leemis, (Aug. 2007) “The Logistic-Exponential Survival Distribution,” Naval Research Logistics (NRL) volume 55, number 3, pp. 252-264."
    },
    {
        "page_idx": 6,
        "text": ""
    }
]