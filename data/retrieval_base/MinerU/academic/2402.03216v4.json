[
    {
        "page_idx": 0,
        "text": "# \nJianlv Chen♣ Shitao Xiao♠† Peitian Zhang♠ Kun Luo♠ Defu Lian♣∗ Zheng Liu♠∗ \n♠ BAAI ♣ University of Science and Technology of China \nstxiao@baai.ac.cn {namespace.pt,luokun695,zhengliu1026}@gmail.com \nchenjianlv@mail.ustc.edu.cn liandefu@ustc.edu.cn \n# \nIn this paper, we introduce a new embedding model called M3-Embedding, which is distinguished for its versatility in Multi-Linguality, LinMguuallti-FunctMiuoltin-Vaelci tRyet,r iaevnald Multi-Granu≤larity. It provides a uniform support for the semantic retrieval of more than 100 working languages. It can simultaneously accomplish the three common retrieval functionalities: dense retrieval, multi-vector retrieval, and sparse retrieval. Besides, it is also capable of processing inputs of different granularities, spanning from short sentences to long documents of up to 8,192 tokens. The effective training of M3-Embedding presents a series of technical contributions. Notably, we propose a novel self-knowledge distillation approach, where the relevance scores from different retrieval functionalities can be integrated as the teacher signal to enhance the training quality. We also optimize the batching strategy, which enables a large batch size and high training throughput to improve the discriminativeness of embeddings. M3- Embedding exhibits a superior performance in our experiment, leading to new state-of-the-art results on multilingual, cross-lingual, and longdocument retrieval benchmarks.1 \n# \nEmbedding models are a critical form of DNN application in natural language processing. They encode the textual data in the latent space, where the underlying semantics of the data can be expressed by the output embeddings (Reimers and Gurevych, 2019; Ni et al., 2022). With the advent of pre-trained language models, the quality of text embeddings have been substantially improved, making them imperative components for the information retrieval (IR) system. One common form of embedding-based IR application is dense retrieval, where relevant answers to the query can be retrieved based on the embedding similarity (Karpukhin et al., 2020; Xiong et al., 2020; Neelakantan et al., 2022; Wang et al., 2022; Xiao et al., 2023). Besides, the embedding model can also be applied to other IR tasks, such as multi-vector retrieval where the fine-grained relevance between query and document is computed based on the interaction score of multiple embeddings (Khattab and Zaharia, 2020), and sparse or lexical retrieval where the importance of each term is estimated by its output embedding (Gao et al., 2021a; Lin and Ma, 2021; Dai and Callan, 2020). \nFigure 1: Characters of M3-Embedding. \n\nDespite the widespread popularity of text embeddings, the existing methods are still limited in versatility. First of all, most of the embedding models are tailored only for English, leaving few viable options for the other languages. Secondly, the existing embedding models are usually trained for one single retrieval functionality. However, typical IR systems call for the compound workflow of multiple retrieval methods. Thirdly, it is challenging to train a competitive long-document retriever due to the overwhelming training cost, where most of the embedding models can only support short inputs. \nTo address the above challenges, we introduce M3-Embedding, which is pronounced for its breakthrough of versatility in working languages, retrieval functionalities, and input granularities. Particularly, M3-Embedding is proficient in multilinguality, which is able to support more than 100 world languages. By learning a common semantic space for different languages, enables both multilingual retrieval within each language and crosslingual retrieval between different languages. Besides, it is able to generate versatile embeddings to support different retrieval functionalities, not just dense retrieval, but also sparse retrieval and multivector retrieval. Finally, M3-Embedding is learned to process different input granularities, spanning from short inputs like sentences and passages, to long documents of up to 8,192 input tokens."
    },
    {
        "page_idx": 1,
        "text": "The training of M3-Embedding poses a significant challenge. In our work, the following technical contributions are made to optimize the embedding quality. Firstly, we propose a novel self knowledge distillation framework, where the multiple retrieval functionalities can be jointly learned and mutually reinforced. In M3-Embedding, the [CLS] embedding is used for dense retrieval, while embeddings from other tokens are used for sparse retrieval and multi-vector retrieval. Based on the principle of ensemble learning (Buihlmann, 2012), such heterogenous predictors can be combined as a stronger predictor. Thus, we integrate the relevance scores from different retrieval functions as the teacher signal, which is used to enhance the learning process via knowledge distillation. Secondly, we optimize the batching strategy to achieve a large batch size and high training throughput, which substantially contributes to the discriminativeness of embeddings. Last but not least, we perform extensive and high-quality data curation. Our dataset includes three sources: 1) the extraction of unsupervised data from massive multi-lingual corpora, 2) the integration of closely related supervised data, 3) the synthesization of scarce training data. The three data sources are complement to each other and applied to different training stages, which lays a solid foundation for the versatile text embeddings. \nM3-Embedding exhibits a remarkable versatility in our experiments. It achieves superior retrieval quality for a variety of languages, leading to state-of-the-art performances on popular multilingual and cross-lingual benchmarks like MIRACL (Zhang et al., 2023c) and MKQA (Longpre et al., 2021). It effectively learns the three retrieval functionalities, which can not only work individually but also work together for an even stronger retrieval quality. It also well maintains its superior capability across different input granularities within 8192 tokens, which outperforms the existing methods by a notable advantage. \n\nOur contributions are summarized as follows. 1) We present M3-Embedding, which achieves unprecedented versatility in multi-linguality, multifunctionality, and multi-granularity. 2) We propose a novel training framework of self-knowledge distillation and optimize the batching strategy for efficient training. We also create high-quality training resource based on comprehensive data curation. 3) Our model, code, and data is publicly available, offering critical resources for both direct usage and future development of text embeddings. \n# \nThe related works are reviewed from three aspects: general text embeddings, embedding models for neural retrieval, embeddings of multi-linguality. \nIn the past few years, substantial progress has been achieved in the field of text embedding. One major driving force is the popularity of pre-trained language models, where the underlying semantic of the data can be effectively encoded by such powerful text encoders (Reimers and Gurevych, 2019; Karpukhin et al., 2020; Ni et al., 2022). In addition, the progress of contrastive learning is another critical factor, especially the improvement of negative sampling (Xiong et al., 2020; Qu et al., 2021) and the exploitation of knowledge distillation (Hofstaitter et al., 2021; Ren et al., 2021; Zhang et al., 2021a). On top of these well-established techniques, it becomes increasingly popular to learn versatile embedding models, which are able to uniformly support a variety of application scenarios. So far, there have been many impactful methods in the direction, like Contriever (Izacard et al., 2022), LLM-Embedder (Zhang et al., 2023a), E5 (Wang et al., 2022), BGE (Xiao et al., 2023), SGPT (Muennighoff, 2022), and Open Text Embedding (Neelakantan et al., 2022), which significantly advance the usage of text embeddings for general tasks. \nOne major application of embedding models is neural retrieval (Lin et al., 2022). By measuring the semantic relationship with the text embeddings, the relevant answers to the input query can be retrieved based on the embedding similarity. The most common form of embedding-based retrieval method is dense retrieval (Karpukhin et al., 2020), where the text encoder’s outputs are aggregated (e.g., via [CLS] or mean-pooling) to compute the embedding similarity. Another common alternative is known as multi-vecor retrieval (Khattab and Zaharia, 2020; Humeau et al., 2020), which applies fine-grained interactions for the text encoder’s outputs to compute the embedding similarity. Finally, the text embeddings can also be transformed into term weights, which facilitates sparse or lexical retrieval (Luan et al., 2021; Dai and Callan, 2020; Lin and Ma, 2021). Typically, the above retrieval methods are realized by different embedding models. To the best of our knowledge, no existing method is able to unify all these functionalities."
    },
    {
        "page_idx": 2,
        "text": "Despite the substantial technical advancement, most of the existing text embeddings are developed only for English, where other languages are lagging behind. To mitigate this problem, continual efforts are presented from multiple directions. One is the development of pre-trained multi-lingual text encoders, such as mBERT (Pires et al., 2019), mT5 (Xue et al., 2021), XLM-R (Conneau et al., 2020). Another one is the curation of training and evaluation data for multi-lingual text embeddings, e.g., MIRACL (Zhang et al., 2023c), mMARCO (Bonifacio et al., 2021), Mr. TyDi (Zhang et al., 2021b), MKQA (Longpre et al., 2021). At the same time, the multi-lingual text embeddings are continually developed from the community, e.g., mDPR (Zhang et al., 2023b), mContriever (Izacard et al., 2022), mE5 (Wang et al., 2022), etc. However, the current progress is still far from enough given the notable gap with English models and the huge imbalance between different languages. \n# \nM3-Embedding realizes three-fold versatility. It supports a wide variety of languages and handles input data of different granularities. Besides, it unifies the common retrieval functionalities of text embeddings. Formally, given a query $q$ in an arbitrary language $x$ , it is able to retrieve document $d$ in language $y$ from the corpus $D^{y}\\colon d^{y}\\gets\\mathrm{fn}^{*}(q^{x},D^{y})$ In this place, $\\mathrm{fn}^{*}(\\cdot)$ belongs to any of the functions: dense, lexical, or multi-vector retrieval; $y$ can be another language or the same language as $x$ . \n# \nM3-Embedding calls for a large-scale and diverse multi-lingual dataset. In this work, we perform comprehensive data collection from three sources: the unsupervised data from unlabeled corpora, the fine-tuning data from labeled corpora, and the finetuning data via synthesization (shown as Table 8). The three data sources complement to each other, which are applied to different stages of the training process. Particularly, the unsupervised data is curated by extracting the rich-semantic structures, e.g., title-body, title-abstract, instruction-output, etc., within a wide variety of multi-lingual corpora, including Wikipedia, S2ORC (Lo et al., 2020), xP3 (Muennighoff et al., 2023), mC4 (Raffel et al., 2020), CC-News (Hamborg et al., 2017) and the well-curated data from MTP (Xiao et al., 2023). To learn the unified embedding space for cross-lingual semantic matching, the parallel sentences are introduced from two translation datasets, NLLB (NLLB Team et al., 2022) and CCMatrix (Schwenk et al., 2021). The raw data is filtered to remove potential bad contents and low-relevance samples. In total, it brings in 1.2 billion text pairs of 194 languages and 2655 cross-lingual correspondences. \n\nBesides, we collect relatively small but diverse and high-quality fine-tuning data from labeled corpora. For English, we incorporate 8 datasets, including HotpotQA (Yang et al., 2018), TriviaQA (Joshi et al., 2017), NQ (Kwiatkowski et al., 2019), MS MARCO (Nguyen et al., 2016), COLIEE (Kim et al., 2023), PubMedQA (Jin et al., 2019), SQuAD (Rajpurkar et al., 2016), and NLI data from SimCSE (Gao et al., 2021b). For Chinese, we integrate 7 datasets, including DuReader (He et al., 2018), mMARCO-ZH (Bonifacio et al., 2021), $\\mathrm{T^{2}}$ -Ranking (Xie et al., 2023), LawGPT(Liu et al., 2023), CMedQAv2 (Zhang et al., 2018), NLI$\\operatorname{zh}^{2}$ , and LeCaRDv2 (Li et al., 2023). For other languages, we leverage the training data from Mr. Tydi (Zhang et al., 2021b) and MIRACL (Zhang et al., 2023c). \nFinally, we generate synthetic data to mitigate the shortage of long document retrieval tasks and introduce extra multi-lingual fine-tuning data (denoted as MultiLongDoc). Specifically, we sample lengthy articles from Wikipedia, Wudao (Yuan et al., 2021) and mC4 datasets and randomly choose paragraphs from them. Then we use GPT3.5 to generate questions based on these paragraphs. The generated question and the sampled article constitute a new text pair to the fine-tuning data. Detailed specifications are presented in Appendix A.2. \n# \nM3-Embedding unifies the common retrieval functionalities of the embedding model, i.e. dense retrieval, lexical (sparse) retrieval, and multi-vector retrieval. The formulation is presented as follows."
    },
    {
        "page_idx": 3,
        "text": "Figure 2: Multi-stage training process of M3-Embedding with self-knowledge distillation. \n\n• Dense retrieval. The input query $q$ is transformed into the hidden states $\\mathbf{H}_{\\mathbf{q}}$ based on a text encoder. We use the normalized hidden state of the special token “[CLS]” for the representation of the query: $e_{q}=n o r m(\\mathbf{H_{q}[0]})$ . Similarly, we can get the embedding of passage $p$ as $e_{p}=n o r m(\\mathbf{H_{p}[0]})$ . Thus, the relevance score between query and passage is measured by the inner product between the two embeddings $e_{q}$ and $e_{p}$ : $s_{d e n s e}\\gets\\langle e_{p},e_{q}\\rangle$ . \n• Lexical Retrieval. The output embeddings are also used to estimate the importance of each term to facilitate lexical retrieval. For each term $t$ within the query (a term is corresponding to a token in our work), the term weight is computed as $w_{q_{t}}\\gets\\mathsf{R e l u}(\\mathbf{W}_{l e x}^{T}\\mathbf{H_{q}}[i]))$ , where $\\mathbf{W}_{l e x}\\in\\mathcal{R}^{d\\times1}$ is the matrix mapping the hidden state to a float number. If a term $t$ appears multiple times in the query, we only retain its max weight. We use the same way to compute the weight of each term in the passage. Based on the estimation term weights, the relevance score between query and passage is computed by the joint importance of the co-existed terms (denoted as $q\\cap p)$ within the query and passage: $\\begin{array}{r}{s_{l e x}\\gets\\sum_{t\\in q\\cap p}(w_{q_{t}}*w_{p_{t}})}\\end{array}$ . \nMulti-Vector Retrieval. As an extension of dense retrieval, the multi-vector method utilizes the entire output embeddings for the representation of query and passage: $E_{q}=n o r m(\\mathbf{W}_{m u l}^{T}\\mathbf{H_{q}})$ , $E_{p}=n o r m(\\mathbf{W}_{m u l}^{T}\\mathbf{H_{p}})$ , where $\\mathbf{W}_{m u l}\\in\\mathbb{R}^{d\\times d}$ is the learnable projection matrix. Following ColBert (Khattab and Zaharia, 2020), we use lateinteraction to compute the fine-grained relevance score: smul ← N1 PiN=1 maxjM=1 Eq[i] · EpT [j]; N and $M$ are the lengths of query and passage. \nThanks to the multi-functionality of the embedding model, the retrieval process can be conducted in a hybrid process. First of all, the candidate results can be individually retrieved by each of the methods (the multi-vector method can be exempted from this step due to its heavy cost). Then, the final retrieval result is re-ranked based on the integrated relevance score: \n\n$$\ns_{r a n k}\\gets w_{1}\\cdot s_{d e n s e}+w_{2}\\cdot s_{l e x}+w_{3}\\cdot s_{m u l}\n$$\nwhere the values of $w_{1},w_{2}$ and $w_{3}$ depend on the downstream scenario. \n# \nThe embedding model is trained to discriminate the positive samples from the negative ones. For each of the retrieval methods, it is expected to assign a higher score for the query’s positive samples compared with the negative ones. Therefore, the training process is conducted to minimize the InfoNCE loss, whose general form is presented by the following loss function: \n$$\n\\mathcal{L}_{s(\\cdot)}=-\\log\\frac{\\exp(s(q,p^{*})/\\tau)}{\\sum_{p\\in\\{p^{*},P^{\\prime}\\}}\\exp(s(q,p)/\\tau)}.\n$$\nHere, $p^{*}$ and $P^{\\prime}$ stand for the positive and negative samples to the query $q;s(\\cdot)$ is any of the functions within $\\left\\{s_{d e n s e}(\\cdot),s_{l e x}(\\cdot),s_{m u l}(\\cdot)\\right\\}$ . \nThe training objectives of different retrieval methods can be mutually conflicting with each their. Therefore, the native multi-objective training can be unfavorable to the embedding’s quality. To facilitate the optimization of multiple retrieval functions, we propose to unify the training process on top of self-knowledge distillation. Particularly, based on the principle of ensemble learning (Buhlmann, 2012), the predictions from different retrieval methods can be integrated as a more accurate relevance score given their heterogeneous nature. In the simplest form, the integration can just be the weighted sum of different prediction scores:"
    },
    {
        "page_idx": 4,
        "text": "$$\ns_{i n t e r}\\gets w_{1}\\cdot s_{d e n s e}+w_{2}\\cdot s_{l e x}+w_{3}\\cdot s_{m u l}.\n$$\nThen we compute the weighted sum of $\\mathcal{L}_{d e n s e}$ , $\\mathcal{L}_{l e x},\\mathcal{L}_{m u l}$ and $\\mathcal{L}_{i n t e r}$ as the loss without selfknowledge distillation: \n$$\n\\mathcal{L}\\gets\\left(\\lambda_{1}{\\boldsymbol{\\cdot}}\\mathcal{L}_{d e n s e}+\\lambda_{2}{\\boldsymbol{\\cdot}}\\mathcal{L}_{l e x}{+}\\lambda_{3}{\\boldsymbol{\\cdot}}\\mathcal{L}_{m u l}{+}\\mathcal{L}_{i n t e r}\\right)/4.\n$$\nIn previous studies, the training quality of embedding model can benefit from knowledge distillation, which takes advantage of fine-grained soft labels from another ranking model (Hofstatter et al., 2021). In this place, we simply employ the integration score $s_{i n t e r}$ as the teacher, where the loss function of each retrieval method is modified as: \n$$\n\\begin{array}{r}{\\mathcal{L}_{*}^{\\prime}\\gets-p\\big(s_{i n t e r}\\big)*\\log p\\big(s_{*}\\big).}\\end{array}\n$$\nHere, $p(\\cdot)$ is the softmax activation; $s_{*}$ is any of the members within $s_{d e n s e},s_{l e x}$ , and $s_{m u l}$ . We further integrate and normalize the modified loss function: \n$$\n\\mathcal{L}^{\\prime}\\leftarrow\\left(\\lambda_{1}\\cdot\\mathcal{L}_{d e n s e}^{\\prime}+\\lambda_{2}\\cdot\\mathcal{L}_{l e x}^{\\prime}+\\lambda_{3}\\cdot\\mathcal{L}_{m u l}^{\\prime}\\right)/3.\n$$\nFinally, we derive the final loss function for selfknowledge distillation with the linear combination of $\\mathcal{L}$ and $\\mathcal{L}^{\\prime}\\colon\\mathcal{L}_{f i n a l}\\leftarrow\\left(\\mathcal{L}+\\mathcal{L}^{\\prime}\\right)/2$ . \nThe training process constitutes a multi-stage workflow (Figure 2). In the first place, the text encoder (an XLM-RoBERTa (Conneau et al., 2020) model adapted by RetroMAE (Xiao et al., 2022) method) is pre-trained with the massive unsupervised data, where only the dense retrieval is trained in the basic form of contrastive learning. The self-knowledge distillation is applied to the second stage, where the embedding model is fine-tuned to establish the three retrieval functionalities. The random initialization of $\\mathbf{W}_{l e x}$ led to poor $s_{l e x}$ accuracy and high $\\mathcal{L}_{l e x}$ at the beginning of the training. In order to reduce the impact of this, we set $w_{1}=1$ , $w_{2}=0.3$ , $w_{3}=1$ , $\\lambda_{1}=1$ , $\\lambda_{2}=0.1$ and $\\lambda_{3}=1$ during the training process. Both labeled and synthetic data are used in this stage, where hard negative samples are introduced for each query following the ANCE method (Xiong et al., 2020). (See Appendix B.1 for more details.) \n# \nThe embedding model needs to learn from diverse and massive multi-lingual data to fully capture the general semantic of different languages. It also needs to keep the batch size as large as possible (introducing a huge amount of in-batch negatives) to ensure the discriminativeness of text embeddings. Given the limitations on GPU’s memory and computation power, people usually truncate the input data into short sequences for high throughput of training and a large batch size. However, the common practice is not a feasible option for M3-Embedding because it needs to learn from both short and long-sequence data to effectively handle the input of different granularities. In our work, we improve the training efficiency by optimizing the batching strategy, which enables high training throughput and large batch sizes. \nFigure 3: Efficient Batching. (Data is grouped and sampled by length. Gradient-checkpointing and crossGPU broadcasting are enabled to save memory.) \n\nParticularly, the training data is pre-processed by being grouped by sequence length. When producing a mini-batch, the training instances are sampled from the same group. Due to the similar sequence lengths, it significantly reduces sequence padding (Figure 3, marked in red) and facilitates a more effective utilization of GPUs. Besides, when sampling the training data for different GPUs, the random seed is always fixed, which ensures the load balance and minimizes the waiting time in each training step. Besides, when handling longsequence training data, the mini-batch is further divided into sub-batches, which takes less memory footprint. We iteratively encode each sub-batch using gradient checkpointing (Chen et al., 2016) and gather all generated embeddings. This method can significantly increase the batch size. For example, when processing text with a length of 8192, the batch size can be increased by more than 20 times. (see Appendx B.3 for more details.) Finally, the embeddings from different GPUs are broadcasted, allowing each device to obtain all embeddings in the distributed environment, which notably expands the scale of in-bath negative samples."
    },
    {
        "page_idx": 5,
        "text": "Table 1: Multi-lingual retrieval performance on the MIRACL dev set (measured by $\\mathrm{nDCG}@10\\rangle$ \n\\begin{tabular}{llllllllllllllllll}\nModel & Avg & ar & bn en & es & fa &  &  & frhiid &  &  & ko & ru & SW & te & thzh & de & yo \\\\\n\\multicolumn{10}{l}{Baselines (Prior Work)} \\\\\nBM25 & 31.9 \\\\\nmDPR & 41.8 \\\\\nmContriever & 43.1 \\\\\nmE5large & 66.6 \\\\\nE5mistral-7b & 63.4 \\\\\nOpenAI-3 & 54.9 &  & 一 & 一 & 一 &  &  &  &  &  &  &  &  &  & 一 \\\\\n\\multicolumn{10}{l}{M3-Embedding(OurWork)} \\\\\nDense & 69.2 \\\\\nSparse & 53.9 \\\\\nMulti-vec & 70.5 \\\\\nDense+Sparse & 70.4 \\\\\nAll & 71.5 \\\\\n\\end{tabular}\n\n\nFor users who are severely limited in computation or data resource, we present an even simpler method called MCLS (Multi-CLS), which simply inserts multiple CLS tokens to the long document during inference, and takes the average of all CLS embeddings as the ultimate embedding of the document. Despite simplicity, it is surprisingly effective in practice. (See Appendix B.2 for more details.) \n# \nIn this section, we investigate M3-Embedding’s performance in terms of multi-lingual retrieval, crosslingual retrieval, and long-doc retrieval. We also explore the impact of its technical factors. \n# \nWe evaluate the multi-lingual retrieval performance with MIRACL (Zhang et al., 2023c), which consists of ad-hoc retrieval tasks in 18 languages. Each task is made up of query and passage presented in the same language. Following the official benchmark, we evaluate our method using Pyserini (Lin et al., 2021), and use $\\mathrm{nDCG}@10$ as the primary evaluation metric (Recall $@100$ is also measured and reported in Appendix C.1). Specifically, for the dense method (denoted as Dense), we first use it to generate the embeddings of the corpus and then build the dense index for searching top-1000 candidates with Faiss. For the sparse method (denoted as Sparse), we first use it to generate the weights of the corpus and then build the sparse index for searching top-1000 candidates with Lucene. For the multi-vector method (denoted as Multi-vec), considering its heavy cost, we use it as reranker to re-rank the top-200 candidates from dense method. For the hybrid retrieval of dense method and sparse method (denoted as $D e n s e+S p a r s e)$ , we set $w_{1}=1$ , $w_{2}\\:=\\:0.3$ and $w_{3}=0$ in equation(1) to re-rank the union set of top-1000 candidates from Dense and top-1000 candidate from Sparse. For the hybrid retrieval of all three methods (denoted as $\\underline{{A l l}}$ , we set $w_{1}=1$ , $w_{2}=0.3$ and $w_{3}=1$ in equation(1) to re-rank the top-200 candidates from Dense. \n\nWe incorporate the following baselines in our experiment: the lexical retrieval method: BM25 (Robertson and Zaragoza, 2009); the dense retrieval methods: $\\mathrm{mDPR}^{3}$ (Zhang et al., 2023b), mContriever4 (Izacard et al., 2022), $\\mathrm{mE}5_{\\mathrm{large}}$ (Wang et al., 2022) and $\\mathrm{E}5_{\\mathrm{mistral-7b}}$ (Wang et al., 2023). To make the BM25 and M3 more comparable, in the experiment, we use the same tokenizer as M3 (i.e., the tokenizer of XLM-Roberta) for BM25. Using the same vocabulary from XLM-Roberta can also ensure that both approaches have the same retrieval latency. The results of BM25 with different tokenizers are shown in Appendix C.2. We also make a comparison with Text-Embedding-3-Large(abbreviated as OpenAI3), which was recently released by OpenAI5. \nWe can make the following observations according to the experiment result in Table 1. Firstly, M3- Embedding already achieves a superior retrieval performance with only its dense retrieval functionality (Dense). It not only outperforms other baseline methods in the average performance, but also maintains a consistent empirical advantage in most of individual languages. Even compared with $\\mathrm{E}5_{\\mathrm{mistral-7b}}$ , which leverages a much larger Mistral-7B model as the text encoder and specifically trained with English data, our method is able to produce a similar result in English and notably higher results in the other languages. Besides, the sparse retrieval functionality (Sparse) is also effectively trained by M3-Embedding, as it outperforms the typical BM25 methods in all languages. We can also observe the additional improvement from multi-vector retrieval, which relies on finegrained interactions between query and passage’s embeddings to compute the relevance score. Finally, the collaboration of dense and sparse method (Dense $^{+}$ Sparse) leads to a further improvement over each individual method, and the collaboration of all three methods (All) brings forth the best performance."
    },
    {
        "page_idx": 6,
        "text": "Table 2: Cross-lingual retrieval performance on MKQA (measured by Recall $\\ @100,$ ). \n\\begin{tabular}{llllllllllll}\n\\multicolumn{7}{l}{Baselines (Prior Work)} & \\multicolumn{5}{l}{M3-Embedding (Our Work)} \\\\\n\\multirow{2}{*}{} & \\multirow{2}{*}{BM25} & \\multirow{2}{*}{mDPR} & \\multirow{2}{*}{mContriever} & \\multirow{2}{*}{mE51arge} & \\multirow{2}{*}{E5mistral-7b} & \\multirow{2}{*}{OpenAI-3 Dense} & \\multirow{2}{*}{} & \\multirow{2}{*}{Multi-vec} & \\multirow{2}{*}{Dense+Sparse} & \\multirow{2}{*}{All} \\\\\n &  &  &  &  &  &  &  &  &  &  & Sparse \\\\\nar & 18.9 & 48.2 & 58.2 & 68.7 & 59.6 & 65.6 & 71.1 & 23.5 & 71.4 & 71.1 & 71.5 \\\\\nda & 49.3 & 67.4 & 73.9 & 77.4 & 77.8 & 73.6 & 77.2 & 55.4 & 77.5 & 77.4 & 77.6 \\\\\nde & 35.4 & 65.8 & 71.7 & 76.9 & 77.0 & 73.6 & 76.2 & 43.3 & 76.3 & 76.4 & 76.3 \\\\\nes & 43.4 & 66.8 & 72.6 & 76.4 & 77.4 & 73.9 & 76.4 & 50.6 & 76.6 & 76.7 & 76.9 \\\\\nf & 46.3 & 56.2 & 70.2 & 74.0 & 72.0 & 72.7 & 75.1 & 51.1 & 75.3 & 75.3 & 75.5 \\\\\nfr & 45.3 & 68.2 & 72.8 & 75.5 & 78.0 & 74.1 & 76.2 & 53.9 & 76.4 & 76.6 & 76.6 \\\\\nhe & 26.9 & 49.7 & 63.8 & 69.6 & 47.2 & 58.1 & 72.4 & 31.1 & 72.9 & 72.5 & 73.0 \\\\\nhu & 38.2 & 60.4 & 69.7 & 74.7 & 75.0 & 71.2 & 74.7 & 44.6 & 74.6 & 74.9 & 75.0 \\\\\nit & 45.2 & 66.0 & 72.3 & 76.8 & 77.1 & 73.6 & 76.0 & 52.5 & 76.4 & 76.3 & 76.5 \\\\\nja & 24.5 & 60.3 & 64.8 & 71.5 & 65.1 & 71.9 & 75.0 & 31.3 & 75.1 & 75.0 & 75.2 \\\\\nkm & 27.8 & 29.5 & 26.8 & 28.1 & 34.3 & 33.9 & 68.6 & 30.1 & 69.1 & 68.8 & 69.2 \\\\\nko & 27.9 & 50.9 & 59.7 & 68.1 & 59.4 & 63.9 & 71.6 & 31.4 & 71.7 & 71.6 & 71.8 \\\\\nms & 55.9 & 65.5 & 74.1 & 76.3 & 77.2 & 73.3 & 77.2 & 62.4 & 77.4 & 77.4 & 77.4 \\\\\nnl & 56.2 & 68.2 & 73.7 & 77.8 & 79.1 & 74.2 & 77.4 & 62.4 & 77.6 & 77.7 & 77.6 \\\\\nno & 52.1 & 66.7 & 73.5 & 77.3 & 76.6 & 73.3 & 77.1 & 57.9 & 77.2 & 77.4 & 77.3 \\\\\npl & 40.8 & 63.3 & 71.6 & 76.7 & 77.1 & 72.7 & 76.3 & 46.1 & 76.5 & 76.3 & 76.6 \\\\\npt & 44.9 & 65.5 & 72.0 & 73.5 & 77.5 & 73.7 & 76.3 & 50.9 & 76.4 & 76.5 & 76.4 \\\\\nru & 33.2 & 62.7 & 69.8 & 76.8 & 75.5 & 72.0 & 76.2 & 36.9 & 76.4 & 76.2 & 76.5 \\\\\nSV & 54.6 & 66.9 & 73.2 & 77.6 & 78.3 & 74.0 & 76.9 & 59.6 & 77.2 & 77.4 & 77.4 \\\\\nth & 37.8 & 53.8 & 66.9 & 76.0 & 67.4 & 65.2 & 76.4 & 42.0 & 76.5 & 76.5 & 76.6 \\\\\ntr & 45.8 & 59.1 & 71.1 & 74.3 & 73.0 & 71.8 & 75.6 & 51.8 & 75.9 & 76.0 & 76.0 \\\\\nvi & 46.6 & 63.4 & 70.9 & 75.4 & 70.9 & 71.1 & 76.6 & 51.8 & 76.7 & 76.8 & 76.9 \\\\\nzh_cn & 31.0 & 63.7 & 68.1 & 56.6 & 69.3 & 70.7 & 74.6 & 35.4 & 74.9 & 74.7 & 75.0 \\\\\nzh_hk & 35.0 & 62.8 & 68.0 & 58.1 & 65.1 & 69.6 & 73.8 & 39.8 & 74.1 & 74.0 & 74.3 \\\\\nzh_tw & 33.5 & 64.0 & 67.9 & 58.1 & 65.8 & 69.7 & 73.5 & 37.7 & 73.5 & 73.6 & 73.6 \\\\\nAvg & 39.9 & 60.6 & 67.9 & 70.9 & 70.1 & 69.5 & 75.1 & 45.3 & 75.3 & 75.3 & 75.5 \\\\\n\\end{tabular}\n\n\n\n# \nWe make evaluation for the cross-lingual retrieval performance with the MKQA benchmark (Longpre et al., 2021), which includes queries in 25 nonEnglish languages. For each query, it needs to retrieve the passages containing answers from the English Wikipedia corpus. In our experiment, we make use of the well-processed corpus offered by the BEIR6 (Thakur et al., 2021). Following the previous study (Izacard et al., 2022), we report Recall $@100$ as the primary metric (Recall $@20$ is reported as an auxiliary metric in the Appendix C.1). For Dense $^{+}$ Sparse method and All method, we set the same weights as in MIRACL dataset. \nThe experiment result is shown in Table 2. Similar to our observation in multi-lingual retrieval, M3-Embedding continues to produce a superior performance, where it notably outperforms other baseline methods purely with its dense retrieval functionality (Dense). The collaboration of different retrieval methods brings in further improvements, leading to the best empirical performance of cross-lingual retrieval. Besides, we can also observe the following interesting results which are unique to this benchmark. Firstly, the performance gaps are not as significant as MIRACL, where competitive baselines like $\\mathrm{E}5_{\\mathrm{mistral-7b}}$ is able to produce similar or even better results on some of the testing languages. However, the baselines are prone to bad performances in many other languages, especially the low-resource languages, such as ar, km, he, etc. In contrast, M3-Embedding maintains relatively stable performances in all languages, which can largely be attributed to its pre-training over comprehensive unsupervised data. Secondly, although M3- Embedding (Sparse) is still better than BM25, it performs badly compared with other methods. This is because there are only very limited co-existed terms for cross-lingual retrieval as the query and passage are presented in different languages. \n\n# \nWe evaluate the retrieval performance with longer sequences with two benchmarks: MLDR (Multilingual Long-Doc Retrieval), which is curated by the multilingual articles from Wikipedia, Wudao and $\\mathrm{mC4}$ (see Table 7), and NarrativeQA (Kocisky et al., 2018; Ginther et al., 2023), which is only for English. In addition to the previous baselines, we further introduce JinaEmbeddingv2 (Günther et al., 2023), text-embeddingada-002 and text-embedding-3-large from OpenAI given their outstanding long-doc retrieval capability. For Dense $^{\\cdot+}$ Sparse method, we set $w_{1}=0.2$ , $w_{2}~=~0.8$ and $w_{3}~=~0$ in equation(1). For All method, we set $w_{1}~=~0.15$ , $w_{2}~=~0.5$ and $w_{3}=0.35$ in equation(1)."
    },
    {
        "page_idx": 7,
        "text": "\\begin{tabular}{lllllllllllllll}\n & Max Length|Avg &  & ar & de & en & es & fr & hi it & ja & ko & pt & ru & th & zh \\\\\nBaselines(PriorWork) \\\\\nBM25 & 8192 & 53.6 & 45.1 \\\\\nmDPR & 512 & 23.5 & 15.6 & 17.1 & 23.9 & 34.1 39.614.6 &  & 35.4 & 23.7 & 16.5 & 43.3 & 28.8 & 3.4 & 9.5 \\\\\nmContriever & 512 & 31.0 & 25.4 &  & 24.228.744.650.317.243.2 &  &  &  & 27.3 &  &  & ：23.6 56.6 37.7 & 9.0 & 15.3 \\\\\nmE5large & 512 & 34.2 & 33.0 &  & 26.933.051.149.521.043.1 &  &  &  &  &  &  & 29.927.158.7 42.4 & 415.9 & 13.2 \\\\\nE5mistral-7b & 8192 & 42.6 & 29.6 & 40.643.3 &  & 70.260.523.2 &  & 55.3 & 41.6 & 32.7 &  & 69.552.4 & 418.2 & 16.8 \\\\\ntext-embedding-ada-002 & 8191 & 32.5 &  &  & 16.334.438.7 & 59.853.9 &  & 8.0 &  &  &  & 46.5 28.6 20.7 60.6 34.8 & 9.0 & 11.2 \\\\\njina-embeddings-v2-base-en & 8192 &  &  &  & 37.0 \\\\\nM3-Embedding (Our Work) \\\\\nDense & 8192 & 52.5 \\\\\nSparse & 8192 & 62.2 & 58.7 & 53.0 & 62.1 & 87.482.749.674.753.9 &  &  &  & 47.9 &  & 85.272.940.340.5 \\\\\nMulti-vec & 8192 & 57.6 &  &  &  &  &  &  &  &  &  & 56.6 50.4 55.879.5 77.2 46.6 66.8 52.8 48.8 77.5 64.2 39.4 32.7 \\\\\nDense+Sparse & 8192 & 64.8 & 63.0 &  &  &  &  &  &  &  &  & 56.464.288.784.252.375.858.553.186.075.642.942.0 \\\\\nAll & 8192 & 65.0 & 64.7 &  &  &  &  &  &  &  &  &  & 57.9 63.886.8 83.9 52.2 75.5 60.155.7 85.4 73.844.7 40.0 \\\\\nM3-w.o.long \\\\\nDense-w.o.long & 8192 & 41.2 &  &  &  &  &  &  &  &  &  & 35.435.237.564.059.328.853.141.729.863.5 51.119.516.5 \\\\\nDense-w.o.long (MCLS) & 8192 & 45.0 & 37.943.341.267.764.632.055.843.433.167.852.827.218.2 \\\\\n\\end{tabular}\n\n\n\nThe evaluation result on MLDR is presented in Table 3. Interestingly, M3 (Sparse) turns out to be a more effective method for long document retrieval, which achieves another about 10 points improvement over the dense method. Besides, the multivector retrieval is also impressive, which brings $5.1+$ points improvement over M3 (Dense). Finally, the combination of different retrieval methods leads to a remarkable average performance of 65.0. \nTo explore the reason for M3-Embedding’s competitiveness in long-document retrieval, we perform the ablation study by removing the long document data from the fine-tuning stage (denoted as w.o. long). After this modification, the dense method, i.e. Dense-w.o.long, can still outperform the majority of baselines, which indicates that its empirical advantage has been well established during the pre-training stage. We also propose a simple strategy, MCLS, to address this situation (no data or no GPU resource for document-retrieval fine-tuning). Experimental results indicate that MCLS can significantly improve the performance of document retrieval without training $(41.2\\rightarrow45.0)$ ). \nTable 3: Evaluation of multilingual long-doc retrieval on the MLDR test set (measured by $\\mathrm{nDCG}@10)$ . ,Table 4: Evaluation on NarrativeQA $(\\mathrm{nDCG}@10)$ . \n\\begin{tabular}{ll}\nModel Max Length & nDCG@10 \\\\\nBaselines(PriorWork) \\\\\nmDPR 512 16.3 \\\\\nmContriever 512 23.3 \\\\\nmE5large 512 24.2 \\\\\nE5mistral-7b 8192 49.9 \\\\\ntext-embedding-ada-002 8191 41.1 \\\\\ntext-embedding-3-large 8191 51.6 \\\\\njina-embeddings-v2-base-en 8192 39.4 \\\\\nM3-Embedding (Our Work) \\\\\nDense 8192 48.7 \\\\\nSparse 8192 57.5 \\\\\nMulti-vec 8192 55.4 \\\\\nDense+Sparse 8192 60.1 \\\\\nAll 8192 61.7 \\\\\n\\end{tabular}\n\n\nWe make further analysis with NarrativeQA (Table 4), where we can make a similar observation as MLDR. Besides, with the growth of sequence length, our method gradually expands its advantage over baseline methods (Figure 5), which reflects its proficiency in handling long inputs. \n# \nSelf-knowledge distillation. The ablation study is performed to analyze the impact of self-knowledge distillation (skd). Particularly, we disable the distillation processing and have each retrieval method trained independently (denoted as M3-w.o.skd). According to our evaluation on MIRACL (Table 5), the original method, i.e. M3-w.skd, is able to achieve better performances than the ablation method in all settings, i.e., Dense, Sparse, Multivec. Notably, the impact is more pronounced for sparse retrieval. Such a result also reflects the incompatibility between dense and sparse retrieval methods. With skd, the incompatibility can be largely overcome. (More detailed results are avail"
    },
    {
        "page_idx": 8,
        "text": "\\begin{tabular}{lll}\n\\multicolumn{2}{l}{Model} & MIRACL \\\\\n\\multirow{3}{*}{M3-w.skd} & Dense & 69.2 \\\\\n & Sparse & 53.9 \\\\\n & Multi-vec & 70.5 \\\\\n\\multirow{3}{*}{M3-w.o.skd} & Dense & 68.7 \\\\\n & Sparse & 36.7 \\\\\n & Multi-vec & 69.3 \\\\\n\\end{tabular}\n\n\nTable 5: Ablation study of self-knowledge distillation on the MIRACL dev set $(\\boldsymbol{\\mathrm{nDCG}}@10)$ . ,Table 6: Ablation study of multi-stage training on the MIRACL dev set $(\\boldsymbol{\\mathrm{nDCG}}@10)$ . \n\\begin{tabular}{ll}\nModel (Dense) & MIRACL \\\\\nFine-tune & 60.5 \\\\\nRetroMAE+Fine-tune & 66.1 \\\\\nRetroMAE + Unsup + Fine-tune & 69.2 \\\\\n\\end{tabular}\n\n\n# \nImpact of multi-stage training. We also make explorations for the impacts from different training stages. Fine-tuning indicates the direct fine-tuning from XLM-RoBERTA (Conneau et al., 2020); RetroMA $E+$ Fine-tuning refers to the fine-tuning on the pre-trained model from RetroMAE (Xiao et al., 2022). Meanwhile, RetroMAE $^+$ Unsup+Finetuning involves fine-tuning on a model that is trained with RetroMAE and then pre-trained on unsupervised data. The results are presented in Table 6. We can observe that RetroMAE can significantly improve the retrieval performance, and pre-training on unsupervised data can further enhance the retrieval quality of the embedding model. (More detailed results are available in Appendix C.1.) \n# \nIn this paper, we introduce M3-Embedding, which substantially advances the versatility of text embeddings in terms of supporting multi-lingual retrieval, handling input of diverse granularities, and unifying different retrieval functionalities. M3- Embedding presents three technical contributions: self-knowledge distillation, efficient batching, and high-quality curation of data. The effectiveness of M3-Embedding is empirically verified, where it leads to superior performances on multi-lingual retrieval, cross-lingual retrieval, and multi-lingual long-document retrieval tasks. \nmarks such as MIRACL and MKQA, it is important to acknowledge that the generalizability of our approach to diverse datasets and real-world scenarios needs to be further investigated. Different datasets may have varying characteristics and challenges that could affect the performance of our model. Secondly, while M3-Embedding is designed to process inputs of different granularities, including long documents of up to 8192 tokens, we acknowledge that processing extremely long documents could pose challenges in terms of computational resources and model efficiency. The performance of our model on very long documents or documents exceeding the specified token limit needs to be further investigated. Furthermore, we claim support for more than 100 working languages in M3-Embedding. However, the potential variations in performance across different languages are not thoroughly discussed. Further analysis and evaluation on a broader range of languages are necessary to understand the robustness and effectiveness of our model across different language families and linguistic characteristics. \n# \nOur work proposes a new embedding model called M3-Embedding, which is distingulished for its versality in multi-linguality, multi-functionality and multi-granularity. Because our model will be publicly avaliable, it is influenced by the inherent impacts of open-source model. Moreover, we use the multilingual data including all kinds of languages in the training of M3-Embedding. However, due to the uneven distribution of training data for different languages, the model’s performance may vary across languages, which could potentially be seen as discriminatory or unfair. We ensure that our work is conformant to the ACL Ethics Policy7. \n# \nWe would like to thank anonymous reviewers for their helpful feedback, and ACL 2024 and ACL Rolling Review organizers for their efforts. This research is supported by National Science and Technology Major Project (2023ZD0121504). \n# \nFirst of all, while our proposed M3-Embedding model achieves state-of-the-art performance on popular multi-lingual and cross-lingual bench\n# \nLuiz Bonifacio, Vitor Jeronymo, Hugo Queiroz Abonizio, Israel Campiotti, Marzieh Fadaee, Roberto"
    },
    {
        "page_idx": 9,
        "text": "Lotufo, and Rodrigo Nogueira. 2021. mmarco: A multilingual version of ms marco passage ranking dataset. arXiv preprint arXiv:2108.13897. \nPeter Buhlmann. 2012. Bagging, Boosting and Ensemble Methods, pages 985–1022. Springer Berlin Heidelberg, Berlin, Heidelberg. \nTianqi Chen, Bing Xu, Chiyuan Zhang, and Carlos Guestrin. 2016. Training deep nets with sublinear memory cost. arXiv preprint arXiv:1604.06174. \nAlexis Conneau, Kartikay Khandelwal, Naman Goyal, Vishrav Chaudhary, Guillaume Wenzek, Francisco Guzman, Edouard Grave, Myle Ott, Luke Zettlemoyer, and Veselin Stoyanov. 2020. Unsupervised cross-lingual representation learning at scale. In Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, pages 8440– 8451, Online. Association for Computational Linguistics. \nZhuyun Dai and Jamie Callan. 2020. Context-aware term weighting for first stage passage retrieval. In Proceedings of the 43rd International ACM SIGIR Conference on Research and Development in Information Retrieval, SIGIR ’20, page 1533–1536, New York, NY, USA. Association for Computing Machinery. \nLeo Gao, Stella Biderman, Sid Black, Laurence Golding, Travis Hoppe, Charles Foster, Jason Phang, Horace He, Anish Thite, Noa Nabeshima, Shawn Presser, and Connor Leahy. 2020. The Pile: An $800{\\mathrm{gb}}$ dataset of diverse text for language modeling. arXiv preprint arXiv:2101.00027. \nLuyu Gao, Zhuyun Dai, and Jamie Callan. 2021a. COIL: Revisit exact lexical match in information retrieval with contextualized inverted list. In Proceedings of the 2021 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, pages 3030–3042, Online. Association for Computational Linguistics. \nTianyu Gao, Xingcheng Yao, and Danqi Chen. 2021b. SimCSE: Simple contrastive learning of sentence embeddings. In Proceedings of the 2021 Conference on Empirical Methods in Natural Language Processing, pages 6894–6910, Online and Punta Cana, Dominican Republic. Association for Computational Linguistics. \nMichael Guinther, Jackmin Ong, Isabelle Mohr, Alaeddine Abdessalem, Tanguy Abel, Mohammad Kalim Akram, Susana Guzman, Georgios Mastrapas, Saba Sturua, Bo Wang, Maximilian Werk, Nan Wang, and Han Xiao. 2023. Jina embeddings 2: 8192-token general-purpose text embeddings for long documents. arXiv preprint arXiv:2310.19923. \nFelix Hamborg, Norman Meuschke, Corinna Breitinger, and Bela Gipp. 2017. news-please: A generic news crawler and extractor. In Proceedings of the 15th International Symposium of Information Science, pages 218–223. \nWei He, Kai Liu, Jing Liu, Yajuan Lyu, Shiqi Zhao, Xinyan Xiao, Yuan Liu, Yizhong Wang, Hua Wu, Qiaoqiao She, Xuan Liu, Tian Wu, and Haifeng Wang. 2018. DuReader: a Chinese machine reading comprehension dataset from real-world applications. In Proceedings of the Workshop on Machine Reading for Question Answering, pages 37–46, Melbourne, Australia. Association for Computational Linguistics. \nSebastian Hofstatter, Sheng-Chieh Lin, Jheng-Hong Yang, Jimmy Lin, and Allan Hanbury. 2021. Efficiently teaching an effective dense retriever with balanced topic aware sampling. SIGIR $^{,}21$ , page 113–122, New York, NY, USA. Association for Computing Machinery. \nSamuel Humeau, Kurt Shuster, Marie-Anne Lachaux, and Jason Weston. 2020. Poly-encoders: Architectures and pre-training strategies for fast and accurate multi-sentence scoring. In 8th International Conference on Learning Representations, ICLR 2020, Addis Ababa, Ethiopia, April 26-30, 2020. OpenReview.net. \nGautier Izacard, Mathilde Caron, Lucas Hosseini, Sebastian Riedel, Piotr Bojanowski, Armand Joulin, and Edouard Grave. 2022. Unsupervised dense information retrieval with contrastive learning. Transactions on Machine Learning Research. \nQiao Jin, Bhuwan Dhingra, Zhengping Liu, William Cohen, and Xinghua Lu. 2019. PubMedQA: A dataset for biomedical research question answering. In Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP), pages 2567– 2577, Hong Kong, China. Association for Computational Linguistics. \nMandar Joshi, Eunsol Choi, Daniel Weld, and Luke Zettlemoyer. 2017. TriviaQA: A large scale distantly supervised challenge dataset for reading comprehension. In Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pages 1601–1611, Vancouver, Canada. Association for Computational Linguistics. \nVladimir Karpukhin, Barlas Oguz, Sewon Min, Patrick Lewis, Ledell Wu, Sergey Edunov, Danqi Chen, and Wen-tau Yih. 2020. Dense passage retrieval for opendomain question answering. In Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 6769–6781, Online. Association for Computational Linguistics. \nOmar Khattab and Matei Zaharia. 2020. Colbert: Efficient and effective passage search via contextualized late interaction over bert. In Proceedings of the 43rd International ACM SIGIR Conference on Research and Development in Information Retrieval, SIGIR ’20, page 39–48, New York, NY, USA. Association for Computing Machinery. \nMi-Young Kim, Juliano Rabelo, Randy Goebel, Masaharu Yoshioka, Yoshinobu Kano, and Ken Satoh."
    },
    {
        "page_idx": 10,
        "text": "2023. Coliee 2022 summary: Methods for legal document retrieval and entailment. In New Frontiers in Artificial Intelligence, pages 51–67, Cham. Springer Nature Switzerland. \nTomas Kocisky, Jonathan Schwarz, Phil Blunsom, Chris Dyer, Karl Moritz Hermann, Gabor Melis, and Edward Grefenstette. 2018. The NarrativeQA reading comprehension challenge. Transactions of the Association for Computational Linguistics, 6:317–328. \nTom Kwiatkowski, Jennimaria Palomaki, Olivia Redfield, Michael Collins, Ankur Parikh, Chris Alberti, Danielle Epstein, Illia Polosukhin, Jacob Devlin, Kenton Lee, Kristina Toutanova, Llion Jones, Matthew Kelcey, Ming-Wei Chang, Andrew M. Dai, Jakob Uszkoreit, Quoc Le, and Slav Petrov. 2019. Natural questions: A benchmark for question answering research. Transactions of the Association for Computational Linguistics, 7:452–466. \nHaitao Li, Yunqiu Shao, Yueyue Wu, Qingyao Ai, Yixiao Ma, and Yiqun Liu. 2023. Lecardv2: A largescale chinese legal case retrieval dataset. arXiv preprint arXiv:2310.17609. \nJimmy Lin and Xueguang Ma. 2021. A few brief notes on deepimpact, coil, and a conceptual framework for information retrieval techniques. arXiv preprint arXiv:2106.14807. \nJimmy Lin, Xueguang Ma, Sheng-Chieh Lin, JhengHong Yang, Ronak Pradeep, and Rodrigo Nogueira. 2021. Pyserini: A python toolkit for reproducible information retrieval research with sparse and dense representations. In Proceedings of the 44th International ACM SIGIR Conference on Research and Development in Information Retrieval, SIGIR ’21, page 2356–2362, New York, NY, USA. Association for Computing Machinery. \nJimmy Lin, Rodrigo Nogueira, and Andrew Yates. 2022. Pretrained Transformers for Text Ranking: BERT and Beyond. Springer Nature. \nHongcheng Liu, Yusheng Liao, Yutong Meng, and Yuhao Wang. 2023. Xiezhi: Chinese law large language model. https://github.com/LiuHC0428/LAW GPT. \nKyle Lo, Lucy Lu Wang, Mark Neumann, Rodney Kinney, and Daniel Weld. 2020. S2ORC: The semantic scholar open research corpus. In Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, pages 4969–4983, Online. Association for Computational Linguistics. \nShayne Longpre, Yi Lu, and Joachim Daiber. 2021. MKQA: A linguistically diverse benchmark for multilingual open domain question answering. Transactions of the Association for Computational Linguistics, 9:1389–1406. \nYi Luan, Jacob Eisenstein, Kristina Toutanova, and Michael Collins. 2021. Sparse, dense, and attentional representations for text retrieval. Transactions of the \nAssociation for Computational Linguistics, 9:329– 345. \nNiklas Muennighoff. 2022. Sgpt: Gpt sentence embeddings for semantic search. arXiv preprint arXiv:2202.08904. \nNiklas Muennighoff, Thomas Wang, Lintang Sutawika, Adam Roberts, Stella Biderman, Teven Le Scao, M Saiful Bari, Sheng Shen, Zheng Xin Yong, Hailey Schoelkopf, Xiangru Tang, Dragomir Radev, Alham Fikri Aji, Khalid Almubarak, Samuel Albanie, Zaid Alyafeai, Albert Webson, Edward Raff, and Colin Raffel. 2023. Crosslingual generalization through multitask finetuning. In Proceedings of the 61st Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pages 15991–16111, Toronto, Canada. Association for Computational Linguistics. \nArvind Neelakantan, Tao Xu, Raul Puri, Alec Radford, Jesse Michael Han, Jerry Tworek, Qiming Yuan, Nikolas Tezak, Jong Wook Kim, Chris Hallacy, et al. 2022. Text and code embeddings by contrastive pretraining. arXiv preprint arXiv:2201.10005. \nTri Nguyen, Mir Rosenberg, Xia Song, Jianfeng Gao, Saurabh Tiwary, Rangan Majumder, and Li Deng. 2016. Ms marco: A human generated machine reading comprehension dataset. choice, 2640:660. \nJianmo Ni, Gustavo Hernandez Abrego, Noah Constant, Ji Ma, Keith Hall, Daniel Cer, and Yinfei Yang. 2022. Sentence-t5: Scalable sentence encoders from pretrained text-to-text models. In Findings of the Association for Computational Linguistics: ACL 2022, pages 1864–1874, Dublin, Ireland. Association for Computational Linguistics. \nNLLB Team, Marta R. Costa-jussa, James Cross, Onur Celebi, Maha Elbayad, Kenneth Heafield, Kevin Heffernan, Elahe Kalbassi, Janice Lam, Daniel Licht, Jean Maillard, Anna Sun, Skyler Wang, Guillaume Wenzek, Al Youngblood, Bapi Akula, Loic Barrault, Gabriel Mejia-Gonzalez, Prangthip Hansanti, John Hoffman, Semarley Jarrett, Kaushik Ram Sadagopan, Dirk Rowe, Shannon Spruit, Chau Tran, Pierre Andrews, Necip Fazil Ayan, Shruti Bhosale, Sergey Edunov, Angela Fan, Cynthia Gao, Vedanuj Goswami, Francisco Guzman, Philipp Koehn, Alexandre Mourachko, Christophe Ropers, Safiyyah Saleem, Holger Schwenk, and Jeff Wang. 2022. No language left behind: Scaling human-centered machine translation. arXiv preprint arXiv:2207.04672. \nTelmo Pires, Eva Schlinger, and Dan Garrette. 2019. How multilingual is multilingual BERT? In Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pages 4996–5001, Florence, Italy. Association for Computational Linguistics. \nYingqi Qu, Yuchen Ding, Jing Liu, Kai Liu, Ruiyang Ren, Wayne Xin Zhao, Daxiang Dong, Hua Wu, and"
    },
    {
        "page_idx": 11,
        "text": "Haifeng Wang. 2021. RocketQA: An optimized training approach to dense passage retrieval for opendomain question answering. In Proceedings of the 2021 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, pages 5835–5847, Online. Association for Computational Linguistics. \nColin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael Matena, Yanqi Zhou, Wei Li, and Peter J. Liu. 2020. Exploring the limits of transfer learning with a unified text-to-text transformer. J. Mach. Learn. Res., 21(1). \nPranav Rajpurkar, Jian Zhang, Konstantin Lopyrev, and Percy Liang. 2016. SQuAD: $100{,}000+$ questions for machine comprehension of text. In Proceedings of the 2016 Conference on Empirical Methods in Natural Language Processing, pages 2383–2392, Austin, Texas. Association for Computational Linguistics. \nNils Reimers and Iryna Gurevych. 2019. SentenceBERT: Sentence embeddings using Siamese BERTnetworks. In Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP), pages 3982–3992, Hong Kong, China. Association for Computational Linguistics. \nRuiyang Ren, Yingqi Qu, Jing Liu, Wayne Xin Zhao, QiaoQiao She, Hua Wu, Haifeng Wang, and Ji-Rong Wen. 2021. RocketQAv2: A joint training method for dense passage retrieval and passage re-ranking. In Proceedings of the 2021 Conference on Empirical Methods in Natural Language Processing, pages 2825–2835, Online and Punta Cana, Dominican Republic. Association for Computational Linguistics. \nStephen Robertson and Hugo Zaragoza. 2009. The probabilistic relevance framework: Bm25 and beyond. Found. Trends Inf. Retr., 3(4):333–389. \nHolger Schwenk, Guillaume Wenzek, Sergey Edunov, Edouard Grave, Armand Joulin, and Angela Fan. 2021. CCMatrix: Mining billions of high-quality parallel sentences on the web. In Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics and the 11th International Joint Conference on Natural Language Processing (Volume 1: Long Papers), pages 6490–6500, Online. Association for Computational Linguistics. \nNandan Thakur, Nils Reimers, Andreas Ricklé, Abhishek Srivastava, and Iryna Gurevych. 2021. Beir: A heterogeneous benchmark for zero-shot evaluation of information retrieval models. In Proceedings of the Neural Information Processing Systems Track on Datasets and Benchmarks, volume 1. Curran. \nLiang Wang, Nan Yang, Xiaolong Huang, Binxing Jiao, Linjun Yang, Daxin Jiang, Rangan Majumder, and Furu Wei. 2022. Text embeddings by weaklysupervised contrastive pre-training. arXiv preprint arXiv:2212.03533. \nLiang Wang, Nan Yang, Xiaolong Huang, Linjun Yang, Rangan Majumder, and Furu Wei. 2023. Improving text embeddings with large language models. arXiv preprint arXiv:2401.00368. \nShitao Xiao, Zheng Liu, Yingxia Shao, and Zhao Cao. 2022. RetroMAE: Pre-training retrieval-oriented language models via masked auto-encoder. In Proceedings of the 2022 Conference on Empirical Methods in Natural Language Processing, pages 538–548, Abu Dhabi, United Arab Emirates. Association for Computational Linguistics. \nShitao Xiao, Zheng Liu, Peitian Zhang, and Niklas Muennighof. 2023. C-pack: Packaged resources to advance general chinese embedding. arXiv preprint arXiv:2309.07597. \nXiaohui Xie, Qian Dong, Bingning Wang, Feiyang Lv, Ting Yao, Weinan Gan, Zhijing Wu, Xiangsheng Li, Haitao Li, Yiqun Liu, et al. 2023. T2ranking: A large-scale chinese benchmark for passage ranking. arXiv preprint arXiv:2304.03679. \nLee Xiong, Chenyan Xiong, Ye Li, Kwok-Fung Tang, Jialin Liu, Paul Bennett, Junaid Ahmed, and Arnold Overwijk. 2020. Approximate nearest neighbor negative contrastive learning for dense text retrieval. arXiv preprint arXiv:2007.00808. \nLinting Xue, Noah Constant, Adam Roberts, Mihir Kale, Rami Al-Rfou, Aditya Siddhant, Aditya Barua, and Colin Raffel. 2021. mT5: A massively multilingual pre-trained text-to-text transformer. In Proceedings of the 2021 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, pages 483–498, Online. Association for Computational Linguistics. \nZhilin Yang, Peng Qi, Saizheng Zhang, Yoshua Bengio, William Cohen, Ruslan Salakhutdinov, and Christopher D. Manning. 2018. HotpotQA: A dataset for diverse, explainable multi-hop question answering. In Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing, pages 2369–2380, Brussels, Belgium. Association for Computational Linguistics. \nSha Yuan, Hanyu Zhao, Zhengxiao Du, Ming Ding, Xiao Liu, Yukuo Cen, Xu Zou, Zhilin Yang, and Jie Tang. 2021. Wudaocorpora: A super large-scale chinese corpora for pre-training language models. AI Open, 2:65–68. \nHang Zhang, Yeyun Gong, Yelong Shen, Jiancheng Lv, Nan Duan, and Weizhu Chen. 2021a. Adversarial retriever-ranker for dense text retrieval. arXiv preprint arXiv:2110.03611. \nPeitian Zhang, Shitao Xiao, Zheng Liu, Zhicheng Dou, and Jian-Yun Nie. 2023a. Retrieve anything to augment large language models. arXiv preprint arXiv:2310.07554."
    },
    {
        "page_idx": 12,
        "text": "Sheng Zhang, Xin Zhang, Hui Wang, Lixiang Guo, and Shanshan Liu. 2018. Multi-scale attentive interaction networks for chinese medical question answer selection. IEEE Access, 6:74061–74071. \nXinyu Zhang, Xueguang Ma, Peng Shi, and Jimmy Lin. 2021b. Mr. TyDi: A multi-lingual benchmark for dense retrieval. In Proceedings of the 1st Workshop on Multilingual Representation Learning, pages 127– 137, Punta Cana, Dominican Republic. Association for Computational Linguistics. \nXinyu Zhang, Kelechi Ogueji, Xueguang Ma, and Jimmy Lin. 2023b. Toward best practices for training multilingual dense retrieval models. ACM Trans. Inf. Syst., 42(2). \nXinyu Zhang, Nandan Thakur, Odunayo Ogundepo, Ehsan Kamalloo, David Alfonso-Hermelo, Xiaoguang Li, Qun Liu, Mehdi Rezagholizadeh, and Jimmy Lin. 2023c. MIRACL: A multilingual retrieval dataset covering 18 diverse languages. Transactions of the Association for Computational Linguistics, 11:1114–1131."
    },
    {
        "page_idx": 13,
        "text": "# \n# \nThe language and length distribution (the number of tokens) of the unsupervised data are illustrated in Figure 4. \nWe observed that for long texts (e.g., the news in cc-news), the initial sentences tend to be summarizing statements, and the model can rely solely on the information presented in these initial sentences to establish relevant relationships. To prevent the model from focusing solely on these starting sentences, we implemented a strategy of randomly shuffling the order of segments within entire texts. Specifically, we divided the text into three segments, shuffled their order randomly, and recombined them. This approach allows relevant text segments to appear randomly at any position within the long sequence. During training, we applied this operation to passages with a probability of $0.2\\%$ . \n# \nThe prompt for GPT3.5 is “You are a curious AI assistant, please generate one specific and valuable question based on the following text. The generated question should revolve around the core content of this text, and avoid using pronouns (e.g., ”this”). Note that you should generate only one question, without including additional content:”. The details of generated dataset are shown in Table 7. \n# \n# \nWe adopt a further pre-trained XLM-RoBERTa8 as the foundational model. We extend the max position to 8192 and update the model via the RetroMAE (Xiao et al., 2022) method. The data comprises Pile (Gao et al., 2020), Wudao (Yuan et al., 2021), and mC4 (Raffel et al., 2020) datasets. We sampled a total of 184 million text samples from these sources, covering 105 languages. The maximum sequence length is 8192 and the learning rate is $7\\times10^{-5}$ . The batch size is set to 32 and we accumulate the gradient over 16 steps. Pre-training is conducted on 32 A100(40GB) GPUs for 20,000 steps. \nFor the pre-training with the massive unsupervised data, the max length of query and passage is set to 512 and 8192, respectively. The learning rate is $5\\times10^{-5}$ , the warmup ratio is 0.1 and the weight decay is 0.01. This training process takes 25,000 steps. For training data with different sequence length ranges (e.g., 0-500, 500-1000, etc.), we use different batch sizes. The details are represented in Table 9. The second stage is conducted on 96 A800(80GB) GPUs. \n\nIn the fine-tuning stage, we sample 7 negatives for each query. Refer to Table 9 for the batch size. In the initial phase, we employed approximately 6000 steps to perform warm-up on dense embedding, sparse embedding and multi-vectors. Subsequently, we conducted unified training with selfknowledge distillation. These experiments were carried out on 24 A800(80GB) GPUs. \n# \nThe fine-tuning using long text can be constrained due to the absence of long text data or computation resources. In this situation, we propose a simple but effective method: MCLS(Multiple CLS) to enhance the model’s ability without fine-tuning on long text. The MCLS method aims to utilize multiple CLS tokens to jointly capture the semantics of long texts. Specifically, we insert a CLS token for every fixed number of tokens (in our experiments, we insert a “[CLS]” for each 256 tokens), and each CLS token can capture semantic information from its neighboring tokens. Ultimately, the final text embedding is obtained by averaging the last hidden states of all CLS tokens. \n# \n# \n\nAlgorthm 1 provides the pseudo-code of the splitbatch strategy. For the current batch, we partition it into multiple smaller sub-batches. For each subbatch we utilize the model to generate embeddings, discarding all intermediate activations via gradient checkpointing during the forward pass. Finally, we gather the encoded results from all sub-batch, and obtain the embeddings for the current batch. It is crucial to enable the gradient-checkpointing strategy; otherwise, the intermediate activations for each sub-batch will continuously accumulate, ultimately occupying the same amount of GPU memory as traditional methods."
    },
    {
        "page_idx": 14,
        "text": "\\begin{tabular}{lllllll}\nLanguage & Source & #train & #dev & #test & #cropus & Avg. Length of Docs \\\\\nar & Wikipedia & 1,817 & 200 & 200 & 7,607 & 9,428 \\\\\nde & Wikipedia, mC4 & 1,847 & 200 & 200 & 10,000 & 9,039 \\\\\nen & Wikipedia & 10,000 & 200 & 800 & 200,000 & 3,308 \\\\\nes & Wikipedia, mC4 & 2,254 & 200 & 200 & 9,551 & 8,771 \\\\\nfr & Wikipedia & 1,608 & 200 & 200 & 10,000 & 9,659 \\\\\nhi & Wikipedia & 1,618 & 200 & 200 & 3,806 & 5,555 \\\\\nit & Wikipedia & 2,151 & 200 & 200 & 10,000 & 9,195 \\\\\nja & Wikipedia & 2,262 & 200 & 200 & 10,000 & 9,297 \\\\\nko & Wikipedia & 2,198 & 200 & 200 & 6,176 & 7,832 \\\\\npt & Wikipedia & 1,845 & 200 & 200 & 6,569 & 7,922 \\\\\nru & Wikipedia & 1,864 & 200 & 200 & 10,000 & 9,723 \\\\\nth & mC4 & 1,970 & 200 & 200 & 10,000 & 8,089 \\\\\nzh & Wikipedia,Wudao & 10,000 & 200 & 800 & 200,000 & 4,249 \\\\\nTotal & 一 & 41,434 & 2,600 & 3,800 & 493,709 & 4,737 \\\\\n\\end{tabular}\n\n\nTable 8: Specification of training data. \n\\begin{tabular}{lll}\nData Source & Language & Size \\\\\n\\multicolumn{3}{l}{Unsupervised Data} \\\\\nMTP & EN, ZH & 291.1M \\\\\nS2ORC, Wikipeida & EN & 48.3M \\\\\nxP3, mC4, CC-News & Multi-Lingual & 488.4M \\\\\nNLLB,CCMatrix & Cross-Lingual & 391.3M \\\\\nCodeSearchNet & Text-Code & 344.1K \\\\\nTotal & 一 & 1.2B \\\\\n\\multicolumn{3}{l}{} \\\\\nMS MARCO, HotpotQA, NQ, & Fine-tuning Data EN & 1.1M \\\\\nNLI, etc. DuReader, T2-Ranking, & ZH & 386.6K \\\\\nNLI-zh, etc. MIRACL, \\\\\nMr.TyDi MultiLongDoc & Multi-Lingual Multi-Lingual & 88.9K 41.4K \\\\\n\\end{tabular}\n\n\n\nIn Table 10, we investigate the impact of splitbatch on batch size. It can be observed that, with the split-batch enabled, there is a significant increase in batch size. Simultaneously, the increase becomes more pronounced with longer text lengths, and in the case of a length of 8192, enabling splitbatch results in a growth of batch size by over 20 times. \nTable 7: Specifications of MultiLongDoc dataset. \n\\begin{tabular}{lll}\n\\multirow{2}{*}{Length Range} & \\multicolumn{2}{l}{Batch Size} \\\\\n & Unsupervised & Fine-tuning \\\\\n0-500 & 67,200 & 1,152 \\\\\n500-1000 & 54,720 & 768 \\\\\n1000-2000 & 37,248 & 480 \\\\\n2000-3000 & 27,648 & 432 \\\\\n3000-4000 & 21,504 & 336 \\\\\n4000-5000 & 17,280 & 336 \\\\\n5000-6000 & 15,072 & 288 \\\\\n6000-7000 & 12,288 & 240 \\\\\n7000-8192 & 9,984 & 192 \\\\\n\\end{tabular}\n\nTable 9: Detailed total batch size used in training for data with different sequence length ranges. \n# \n# \nIn this section, we present additional evaluation results on the MIRACL and MKQA benchmarks. As shown in Table 12 and 13, M3-Embedding outperforms all baselines on average. \nThe detailed results of ablation studies of selfknowledge distillation and multi-stage training on the MIRACL dev set are shown in Table 14 and Table 15. \n# \nWe investigate the impact of different tokenizers on the BM25 method, and the results are shown in Table 11. We can observe that:"
    },
    {
        "page_idx": 15,
        "text": "Figure 4: Language and sequence length distribution of unsupervised data \n\n\\begin{tabular}{llll}\n\\multirow{2}{*}{Use Split-batch} & \\multicolumn{3}{l}{Max Length} \\\\\n & 1024 & 4096 & 8192 \\\\\n & 262 & 25 & 6 \\\\\n√ & 855 & 258 & 130 \\\\\n\\end{tabular}\n\n\nTable 10: Maximum batch size per device under different experimental settings. ,Figure 5: NarrativeQA with variant sequence length. \n• Using the Analyzer from Lucene9 can significantly enhance the effectiveness of BM25. Lucene analyzer includes multiple steps typically including tokenization, stemming, stopword removal, etc, achieving better results than directly using the tokenzier of XLMRoBERTa. Additionally, it’s worth noting that the vocabulary size of the tokenizer from XLM-RoBERTa is limited, resulting in fewer unique tokens after encoding documents (for example, on the MLDR dataset, the tokenizer of XLM-RoBERTa produces 1056 unique terms per article, while Lucene’s analyzer generates 1451 unique terms, which is over $37\\%$ more and will increase retrieval latency). \n\n\\begin{tabular}{lll}\nMethod & \\multicolumn{2}{l}{Tokenizer MIRACL MKQA MLDR} \\\\\nBM25 & Analyzer & 38.5 40.9 64.1 \\\\\nBM25 & XLM-R & 31.9 39.9 53.6 \\\\\nM3(Sparse) XLM-R & 53.9 & 45.3 62.2 \\\\\nM3(A1I) XLM-R & 71.5 & 75.5 65.0 \\\\\n\\end{tabular}\n\nTable 11: Comparison with the BM25 methods using different tokenizers. \n\n• M3 outperforms BM25 models using the same tokenizer on all datasets, indicating that the learned weights are significantly better than the weights calculated by BM25. \n• The sparse retrieval of M3 outperforms BM25 on MIRACL and MKQA datasets. In long document retrieval (MLDR), M3’s sparse doesn’t surpass BM25 but achieves competitive performance. This suggests that BM25 remains a highly competitive baseline model. Exploring tokenizers that perform better for sparse representation is a worthwhile topic for future research."
    },
    {
        "page_idx": 16,
        "text": "\\begin{tabular}{llllllllllllllllll}\nModel &  &  & Avgarbnenesfafifrhiidjakoruswtethzhde &  &  &  &  &  &  &  &  &  &  &  &  &  & yo \\\\\n\\multicolumn{10}{l}{Baselines(PriorWork)} \\\\\nBM25 & 67.3 \\\\\nmDPR & 79.0 &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  & 71.5 \\\\\nmContriever & 84.9 &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  & 77.0 \\\\\nmE5large & 94.1 &  &  &  &  &  &  &  &  &  &  &  &  &  &  &  & 93.1 \\\\\nE5mistral-7b & 92.7 \\\\\n\\multicolumn{10}{l}{M3-Embedding(OurWork)} \\\\\nDense & 95.5 \\\\\nSparse & 85.6 &  & 92.096.781.572.187.091.573.387.184.892.491.776.985.198.195.272.969.1 &  &  &  &  &  &  &  &  &  &  &  &  &  & 92.9 \\\\\nMulti-vec & 96.3 \\\\\nDense+Sparse & 96.2 \\\\\nAll & 96.4 \\\\\n\\end{tabular}\n\nTable 12: Recall $@$ 100 on the dev set of the MIRACL dataset for multilingual retrieval in all 18 languages. \n\n\\begin{tabular}{llllllllllll}\n\\multicolumn{7}{l}{Baselines (Prior Work)} & \\multicolumn{5}{l}{M3-Embedding (Our Work)} \\\\\n & BM25 & mDPR & mContriever1 & mE5large & E5mistral-7b & OpenAI-3 & Dense & Sparse & Multi-vec & Dense+Sparse & All \\\\\nar & 13.4 & 33.8 & 43.8 & 59.7 & 47.6 & 55.1 & 61.9 & 19.5 & 62.6 & 61.9 & 63.0 \\\\\nda & 36.2 & 55.7 & 63.3 & 71.7 & 72.3 & 67.6 & 71.2 & 45.1 & 71.7 & 71.3 & 72.0 \\\\\nde & 23.3 & 53.2 & 60.2 & 71.2 & 70.8 & 67.6 & 69.8 & 33.2 & 69.6 & 70.2 & 70.4 \\\\\nes & 29.8 & 55.4 & 62.3 & 70.8 & 71.6 & 68.0 & 69.8 & 40.3 & 70.3 & 70.2 & 70.7 \\\\\nfi & 33.2 & 42.8 & 58.7 & 67.7 & 63.6 & 65.5 & 67.8 & 41.2 & 68.3 & 68.4 & 68.9 \\\\\nJ & 30.3 & 56.5 & 62.6 & 69.5 & 72.7 & 68.2 & 69.6 & 43.2 & 70.1 & 70.1 & 70.8 \\\\\nhe & 16.1 & 34.0 & 50.5 & 61.4 & 32.4 & 46.3 & 63.4 & 24.5 & 64.4 & 63.5 & 64.6 \\\\\nhu & 26.1 & 46.1 & 57.1 & 68.0 & 68.3 & 64.0 & 67.1 & 34.5 & 67.3 & 67.7 & 67.9 \\\\\nit & 31.5 & 53.8 & 62.0 & 71.2 & 71.3 & 67.6 & 69.7 & 41.5 & 69.9 & 69.9 & 70.3 \\\\\ne! & 14.5 & 46.3 & 50.7 & 63.1 & 57.6 & 64.2 & 67.0 & 23.3 & 67.8 & 67.1 & 67.9 \\\\\nkm & 20.7 & 20.6 & 18.7 & 18.3 & 23.3 & 25.7 & 58.5 & 24.4 & 59.2 & 58.9 & 59.5 \\\\\nko & 18.3 & 36.8 & 44.9 & 58.9 & 49.4 & 53.9 & 61.9 & 24.3 & 63.2 & 62.1 & 63.3 \\\\\nms & 42.3 & 53.8 & 63.7 & 70.2 & 71.1 & 66.1 & 71.6 & 52.5 & 72.1 & 71.8 & 72.3 \\\\\nnl & 42.5 & 56.9 & 63.9 & 73.0 & 74.5 & 68.8 & 71.3 & 52.9 & 71.8 & 71.7 & 72.3 \\\\\nno & 38.5 & 55.2 & 63.0 & 71.1 & 70.8 & 67.0 & 70.7 & 47.0 & 71.4 & 71.1 & 71.6 \\\\\npl & 28.7 & 50.4 & 60.9 & 70.5 & 71.5 & 66.1 & 69.4 & 36.4 & 70.0 & 69.9 & 70.4 \\\\\npt & 31.8 & 52.5 & 61.0 & 66.8 & 71.6 & 67.7 & 69.3 & 40.2 & 70.0 & 69.8 & 70.6 \\\\\nru & 21.8 & 49.8 & 57.9 & 70.6 & 68.7 & 65.1 & 69.4 & 29.2 & 70.0 & 69.4 & 70.0 \\\\\nSV & 41.1 & 54.9 & 62.7 & 72.0 & 73.3 & 67.8 & 70.5 & 49.8 & 71.3 & 71.5 & 71.5 \\\\\nth & 28.4 & 40.9 & 54.4 & 69.7 & 57.1 & 55.2 & 69.6 & 34.7 & 70.5 & 69.8 & 70.8 \\\\\ntr & 33.5 & 45.5 & 59.9 & 67.3 & 65.5 & 64.9 & 68.2 & 40.9 & 69.0 & 69.1 & 69.6 \\\\\nvi & 33.6 & 51.3 & 59.9 & 68.7 & 62.3 & 63.5 & 69.6 & 42.2 & 70.5 & 70.2 & 70.9 \\\\\nzh_cn & 19.4 & 50.1 & 55.9 & 44.3 & 61.2 & 62.7 & 66.4 & 26.9 & 66.7 & 66.6 & 67.3 \\\\\nzh_hk & 23.9 & 50.2 & 55.5 & 46.4 & 55.9 & 61.4 & 65.8 & 31.2 & 66.4 & 65.9 & 66.7 \\\\\nzh_tw & 22.5 & 50.6 & 55.2 & 45.9 & 56.5 & 61.6 & 64.8 & 29.8 & 65.3 & 64.9 & 65.6 \\\\\nAvg & 28.1 & 47.9 & 56.3 & 63.5 & 62.4 & 62.1 & 67.8 & 36.3 & 68.4 & 68.1 & 68.8 \\\\\n\\end{tabular}\n\nTable 13: Recall $@20$ on MKQA dataset for cross-lingual retrieval in all 25 languages."
    },
    {
        "page_idx": 17,
        "text": "Table 14: Ablation study of self-knowledge distillation on the MIRACL dev set $\\left(\\mathrm{nDCG}@10\\right)$ . \n\\begin{tabular}{lllllllllllllllllll}\nModel & Avg & ar & bn & en & es &  &  & fafifrhiidjako &  &  &  & ru & SW & te &  & thzhde &  & yo \\\\\n\\multicolumn{10}{l}{M3-w.skd} \\\\\nDense & 69.2 & 78.480.056.956.1 60.9 78.6 58.359.5 56.172.8 69.9 70.178.7 86.2 82.6 62.7 56.7 81.8 \\\\\nSparse & 53.9 \\\\\nMulti-vec & 70.5 \\\\\n\\multicolumn{10}{l}{M3-w.o.skd} \\\\\nDense & 68.7 \\\\\nSparse & 36.7 & 48.2 51.924.320.326.048.616.830.132.033.043.127.245.263.652.222.616.559.2 \\\\\nMulti-vec & 69.3 \\\\\n\\end{tabular}\n\n\nTable 15: Ablation study of multi-stage training on the MIRACL dev set $(\\boldsymbol{\\mathrm{nDCG}}@10)$ . \n\\begin{tabular}{llllllllllllllllllll}\nModel & Avg & ar & bn & en & es & fa & fi & fr & hi &  & id ja & ko & ru & SW & te &  & th & zhc & deyo \\\\\nFine-tune \\\\\nDense & 60.5 \\\\\n & RetroMAE+Fine-tune \\\\\nDense & 66.1 \\\\\nRetroMAE+Unsup+Fine-tune \\\\\nDense & 69.2 \\\\\n\\end{tabular}"
    }
]